In Phase 2 31363
In Phase 2 43745
In Phase 2 44277
In Phase 2 47155
In Phase 2 56027
In Phase 2 62459
Wrote profile results to phase2_Trie.py.lprof
Timer unit: 1e-06 s

Total time: 18.7764 s
File: phase2_Trie.py
Function: rreplace at line 44

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    44                                               @profile
    45                                               def rreplace(self,s, old, new, occurrence):
    46  23528043     11733092      0.5     62.5          if s.endswith(old):
    47    132179       132840      1.0      0.7              li = s.rsplit(old, occurrence)
    48    132179        65636      0.5      0.3              return new.join(li)
    49                                                   else:
    50  23395864      6844797      0.3     36.5              return s

Total time: 41.2319 s
File: phase2_Trie.py
Function: get_incomplete_tweets_frame at line 54

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    54                                               @profile
    55                                               def get_incomplete_tweets_frame(self,data_frame_holder,candidate_featureBase_DF):
    56                                                   #print(candidate_featureBase_DF.head())
    57                                           
    58         6        13012   2168.7      0.0          good_candidates=candidate_featureBase_DF[candidate_featureBase_DF.status=="g"].candidate.tolist()
    59         6        10927   1821.2      0.0          bad_candidates=candidate_featureBase_DF[candidate_featureBase_DF.status=="b"].candidate.tolist()
    60                                           
    61         6          254     42.3      0.0          mixed_candidates= good_candidates + bad_candidates
    62                                           
    63                                                   #incomplete_tweets=self.data_frame_holder[set(self.data_frame_holder[0]).issubset(['a', 'b', 'c'] )]
    64                                           
    65         6     41181614 6863602.3     99.9          data_frame_holder['completeness'] = data_frame_holder['2nd Iteration Candidates'].apply(lambda x: set(x).issubset(mixed_candidates))
    66                                           
    67         6        26063   4343.8      0.1          return data_frame_holder[data_frame_holder.completeness==False]

Total time: 2.469 s
File: phase2_Trie.py
Function: set_readable_labels at line 70

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    70                                               @profile
    71                                               def set_readable_labels(self,candidate_featureBase_DF):
    72                                           
    73                                                   #candidate_featureBase_DF['status'] = candidate_featureBase_DF['probability'].apply(lambda x: set(x).issubset(good_candidates))
    74         6         4715    785.8      0.2          candidate_featureBase_DF['status']='ne'
    75         6       830351 138391.8     33.6          candidate_featureBase_DF['status'][candidate_featureBase_DF['probability']>=0.75]='g'
    76         6       822139 137023.2     33.3          candidate_featureBase_DF['status'][(candidate_featureBase_DF['probability'] > 0.4) & (candidate_featureBase_DF['probability'] < 0.75)] = 'a'
    77         6       811784 135297.3     32.9          candidate_featureBase_DF['status'][candidate_featureBase_DF['probability']<=0.4]='b'
    78                                           
    79         6           10      1.7      0.0          return candidate_featureBase_DF

Total time: 93.1298 s
File: phase2_Trie.py
Function: normalize at line 82

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    82                                               @profile
    83                                               def normalize(self,word):
    84   7516381      3079180      0.4      3.3          strip_op=word
    85   7516381      9003521      1.2      9.7          strip_op=(((strip_op.lstrip(string.punctuation)).rstrip(string.punctuation)).strip()).lower()
    86   7516381      4968588      0.7      5.3          strip_op=(strip_op.lstrip('“‘’”')).rstrip('“‘’”')
    87   7516381     73483159      9.8     78.9          strip_op= self.rreplace(self.rreplace(self.rreplace(strip_op,"'s","",1),"’s","",1),"’s","",1)
    88   7516381      2595372      0.3      2.8          return strip_op

Total time: 0 s
File: phase2_Trie.py
Function: isSubstring at line 90

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    90                                               @profile      
    91                                               def isSubstring(self,to_increase_element,id_to_incr,comparison_holder,phase1_holder_holder_copy):
    92                                                   combined_list=comparison_holder[id_to_incr]+phase1_holder_holder_copy[id_to_incr]
    93                                           
    94                                                   for idx,val in enumerate(comparison_holder[id_to_incr]):
    95                                                       if((to_increase_element[0] in val[0]) and to_increase_element[0] != val[0]):
    96                                                           if((to_increase_element[5] in val[5]) and to_increase_element[5] != val[5]):
    97                                                               return True
    98                                                   for idx,val in enumerate(phase1_holder_holder_copy[id_to_incr]):
    99                                                       if((to_increase_element[0] in val[0]) and to_increase_element[0] != val[0]):
   100                                                           if((to_increase_element[5] in val[2]) and to_increase_element[5] != val[2]):
   101                                                               return True   
   102                                                           
   103                                                   return False

Total time: 0 s
File: phase2_Trie.py
Function: calculate_pmi at line 105

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   105                                               @profile
   106                                               def calculate_pmi(self,big,x1,x2,total):
   107                                                   big__= float(big/total)
   108                                                   x1__=float(x1/total)
   109                                                   x2__=float(x2/total)
   110                                                   pmi= math.log(big__/(x1__*x2__),2.71828182845)
   111                                                   pklv=big__*pmi
   112                                                   #return (1/(1+math.exp(-1*pmi)))
   113                                                   npmi= pmi/(-1.0*(math.log(big__,2.71828182845)))
   114                                                   return npmi,pklv

Total time: 0 s
File: phase2_Trie.py
Function: transfer at line 119

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   119                                               @profile
   120                                               def transfer(self,to_keep,to_split,classifier_results):
   121                                                   #transfering from to_keep to to_split
   122                                                   #print(classifier_results)
   123                                                   
   124                                                   b_star_list=[]
   125                                                   normal_b_list=[]
   126                                           
   127                                                   classifier_results=classifier_results.reset_index()
   128                                           
   129                                                   g_star_list=[]
   130                                                   normal_g_list=[]
   131                                           
   132                                                   #to_split operations
   133                                                   normal_b_list=classifier_results[(classifier_results.pred_prob2< 0.4)& (classifier_results.candidate.isin(to_split))]
   134                                                   normal_a_list_split=classifier_results[(classifier_results.pred_prob2>= 0.4)& (classifier_results.pred_prob2<0.8) & (classifier_results.candidate.isin(to_split))]
   135                                           
   136                                                   normal_b_list= normal_b_list.candidate.tolist()
   137                                                   normal_a_list_split= normal_a_list_split.candidate.tolist()
   138                                           
   139                                                   merger=[]
   140                                                   merger.extend(normal_a_list_split)
   141                                                   merger.extend(normal_b_list)
   142                                                   b_star_list = [x for x in to_split if x not in merger ]
   143                                           
   144                                                   #to_keep operations
   145                                                   normal_g_list=classifier_results[(classifier_results.pred_prob2> 0.8)& (classifier_results.candidate.isin(to_keep))]
   146                                                   normal_a_list_keep=classifier_results[(classifier_results.pred_prob2>= 0.4)& (classifier_results.pred_prob2<0.8) & (classifier_results.candidate.isin(to_keep))]
   147                                           
   148                                                   normal_a_list_keep= normal_a_list_keep.candidate.tolist()
   149                                                   normal_g_list=normal_g_list.candidate.tolist()
   150                                           
   151                                           
   152                                                   merger2=[]
   153                                                   merger2.extend(normal_a_list_keep)
   154                                                   merger2.extend(normal_g_list)
   155                                           
   156                                                   g_star_list= [x for x in to_keep if x not in merger2 ]
   157                                           
   158                                           
   159                                                   append_to_split_list=classifier_results[(classifier_results.pred_prob2< 0.4)& (classifier_results.candidate.isin(to_keep))]
   160                                           
   161                                                   #stay_same_keep=classifier_results[~((classifier_results.pred_prob2< 0.4)& (classifier_results.candidate.isin(to_keep)))]
   162                                                   append_to_split_list=append_to_split_list.candidate.tolist()
   163                                                   to_keep=[candidate for candidate in to_keep if candidate not in append_to_split_list]
   164                                                   to_split.extend(append_to_split_list)
   165                                                   #print(len(to_split),len(to_keep))
   166                                           
   167                                                   #transfering from to_split to to_keep
   168                                                   append_to_keep_list=classifier_results[(classifier_results.pred_prob2> 0.8)& (classifier_results.candidate.isin(to_split))]
   169                                                   #appending into to keep list
   170                                           
   171                                                   append_to_keep_list=append_to_keep_list.candidate.tolist()
   172                                                   #print(append_to_keep_list)
   173                                           
   174                                                   to_split=[candidate for candidate in to_split if candidate not in append_to_keep_list]
   175                                                   to_keep.extend(append_to_keep_list)
   176                                                   #print(len(to_split),len(to_keep))
   177                                           
   178                                                   #removing from to_split list
   179                                           
   180                                                   #print(len(to_split),len(to_keep))
   181                                                   #
   182                                                   merge_split_keep=[]
   183                                                   merge_split_keep.extend(to_keep)
   184                                                   merge_split_keep.extend(to_split)
   185                                           
   186                                                   to_b=classifier_results[(classifier_results.pred_prob2<= 0.4)& (~(classifier_results.candidate.isin(merge_split_keep)))]
   187                                                   to_g=classifier_results[(classifier_results.pred_prob2>= 0.8)& (~(classifier_results.candidate.isin(merge_split_keep)))]
   188                                                   to_a=classifier_results[(classifier_results.pred_prob2> 0.4)& (classifier_results.pred_prob2<0.8)& (~(classifier_results.candidate.isin(merge_split_keep)))]
   189                                           
   190                                                   return normal_a_list_split,normal_a_list_keep,b_star_list,normal_b_list,g_star_list,normal_g_list,to_b,to_g,to_a

Total time: 0 s
File: phase2_Trie.py
Function: verify at line 192

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   192                                               @profile
   193                                               def verify(self, subsequence, CTrie):
   194                                                   return CTrie.__contains__(subsequence)

Total time: 0 s
File: phase2_Trie.py
Function: check_sequence at line 197

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   197                                               @profile
   198                                               def check_sequence(self, sequence, l, CTrie):
   199                                                   result=[]
   200                                                   subsequence_length=l
   201                                                   while(subsequence_length>0):
   202                                                       shift=len(sequence)-subsequence_length
   203                                                       verified_subsequence=[]
   204                                                       verified=False
   205                                                       for i in range(0,shift+1):
   206                                                           list1=sequence[i:(i+subsequence_length)]
   207                                                           text=' '.join(str(e[0]) for e in list1)
   208                                                           subsequence=(self.normalize(text)).split()
   209                                                           #print("search for", subsequence)
   210                                                           if self.verify(subsequence, CTrie):
   211                                                               verified_subsequence.append(i)
   212                                                               verified_subsequence.append(i+subsequence_length)
   213                                                               #print(subsequence)
   214                                                               #print(subsequence,[(verified_subsequence[0]-0),(int(sequence[-1][1])-verified_subsequence[1])])
   215                                                               verified=True
   216                                                               break
   217                                                       if(verified):
   218                                                           result.append(sequence[verified_subsequence[0]:verified_subsequence[1]])
   219                                                           if(verified_subsequence[0]-0)>0:
   220                                                               subequence_to_check=sequence[0:verified_subsequence[0]]
   221                                                               #since tokens before the starting position of the verified subsequence have already been checked for subsequences of this length
   222                                                               partition_length=min(len(subequence_to_check),(subsequence_length-1))
   223                                                               #print(subequence_to_check)
   224                                                               lst=self.check_sequence(subequence_to_check,partition_length, CTrie)
   225                                                               if(lst):
   226                                                                   result.extend(lst)
   227                                                           if(int(sequence[-1][1])-verified_subsequence[1])>0:
   228                                                               subequence_to_check=sequence[(verified_subsequence[1]):]
   229                                                               #since tokens following the end position of the verified subsequence have not been checked for subsequences of this length
   230                                                               partition_length=min(len(subequence_to_check),(subsequence_length))
   231                                                               #print(subequence_to_check)
   232                                                               lst=self.check_sequence(subequence_to_check,partition_length, CTrie)
   233                                                               if(lst):
   234                                                                   result.extend(lst)
   235                                                           return result
   236                                                       else:
   237                                                           subsequence_length-=1
   238                                                   return result

Total time: 146.535 s
File: phase2_Trie.py
Function: get_Candidates at line 241

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   241                                               @profile
   242                                               def get_Candidates(self, sequence, CTrie):
   243                                                   #print(sequence)
   244    729241       795522      1.1      0.5          candidateList=[]
   245    729241       679081      0.9      0.5          left=0
   246    729241       665603      0.9      0.5          start_node=CTrie
   247    729241       629171      0.9      0.4          last_cand="NAN"
   248    729241       623579      0.9      0.4          last_cand_substr=""
   249    729241       627229      0.9      0.4          reset=False
   250   2691794      3142656      1.2      2.1          for right in range(len(sequence)):
   251   1962553      1746061      0.9      1.2              if(reset):
   252    265620       232410      0.9      0.2                  left=right
   253   1962553      2000380      1.0      1.4              curr_text=sequence[right][0]
   254   1962553      2158159      1.1      1.5              curr_pos=[sequence[right][1]]
   255   1962553     34660005     17.7     23.7              curr=self.normalize(sequence[right][0])
   256                                           
   257   1962553     33393131     17.0     22.8              cand_str=self.normalize(last_cand_substr+" "+curr)
   258   1962553      2574986      1.3      1.8              last_cand_sequence=sequence[left:(right+1)]
   259   1962553      6162996      3.1      4.2              last_cand_text=' '.join(str(e[0]) for e in last_cand_sequence)
   260   1962553     36413655     18.6     24.8              last_cand_text_norm=self.normalize(' '.join(str(e[0]) for e in last_cand_sequence))
   261                                                       #print("==>",cand_str,last_cand_text)
   262   1962553      3595933      1.8      2.5              if ((curr in start_node.path.keys())&(cand_str==last_cand_text_norm)):
   263                                                           #print("=>",cand_str,last_cand_text)
   264   1162690      1057114      0.9      0.7                  reset=False
   265   1162690      1691142      1.5      1.2                  if (start_node.path[curr].value_valid):
   266                                                               #print(last_cand_text)
   267    874004      1731458      2.0      1.2                      last_cand_pos=[e[1] for e in last_cand_sequence]
   268    874004       779962      0.9      0.5                      last_cand=last_cand_text
   269   1162690      1168772      1.0      0.8                  start_node=start_node.path[curr]
   270   1162690      1040420      0.9      0.7                  last_cand_substr=cand_str
   271                                                       else:
   272                                                           #print("=>",cand_str,last_cand_text)
   273    799863       765085      1.0      0.5                  if(last_cand!="NAN"):
   274    354295       416984      1.2      0.3                      candidateList.append((last_cand,last_cand_pos))
   275    799863       723745      0.9      0.5                  last_cand="NAN"
   276    799863       804247      1.0      0.5                  if(start_node!=CTrie):
   277    515242       456469      0.9      0.3                      start_node=CTrie
   278    515242       473805      0.9      0.3                      last_cand_substr=""
   279    515242       696749      1.4      0.5                      if curr in start_node.path.keys():
   280                                                                   #print("here",curr)
   281    314433       280015      0.9      0.2                          reset=False
   282    314433       463774      1.5      0.3                          if start_node.path[curr].value_valid:
   283    250150       229746      0.9      0.2                              last_cand_text=curr_text
   284    250150       221814      0.9      0.2                              last_cand_pos=curr_pos
   285    250150       222431      0.9      0.2                              last_cand=curr
   286    314433       276518      0.9      0.2                          left=right
   287    314433       314786      1.0      0.2                          start_node=start_node.path[curr]
   288    314433       301125      1.0      0.2                          last_cand_substr=curr
   289                                                               else:
   290    200809       177056      0.9      0.1                          reset=True
   291                                                           else:
   292    284621       255552      0.9      0.2                      reset=True
   293                                                   #print(last_cand)
   294    729241       714264      1.0      0.5          if(last_cand!="NAN"):
   295    460066       555491      1.2      0.4              candidateList.append((last_cand,last_cand_pos))
   296    729241       616050      0.8      0.4          return candidateList

Total time: 0 s
File: phase2_Trie.py
Function: append_rows at line 299

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   299                                               @profile
   300                                               def append_rows(self,df_holder):
   301                                               
   302                                                   df = pd.DataFrame(df_holder)
   303                                                   #self.data_frame_holder=self.data_frame_holder.append(df,ignore_index=True)
   304                                                   #self.data_frame_holder=self.data_frame_holder.reset_index(drop=True)
   305                                                   #print(len(self.data_frame_holder))
   306                                                   return df

Total time: 0 s
File: phase2_Trie.py
Function: join_token_tuples at line 310

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   310                                               @profile
   311                                               def join_token_tuples(self,list_of_tuples):
   312                                                   #print(string.punctuation)
   313                                                   combined_str=(' '.join(tuple[0] for tuple in list_of_tuples)).lstrip(string.punctuation).rstrip(string.punctuation).strip()
   314                                                   combined_pos='*'.join(str(tuple[1]) for tuple in list_of_tuples)
   315                                                   combined_tuple=(combined_str,combined_pos,list_of_tuples[0][2],list_of_tuples[0][3],list_of_tuples[0][4],list_of_tuples[0][5],list_of_tuples[0][6])
   316                                                   return combined_tuple

Total time: 6.78715 s
File: phase2_Trie.py
Function: all_capitalized at line 320

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   320                                               @profile
   321                                               def all_capitalized(self,candidate):
   322    326300       188252      0.6      2.8          strip_op=candidate
   323    326300       393830      1.2      5.8          strip_op=(((strip_op.lstrip(string.punctuation)).rstrip(string.punctuation)).strip())
   324    326300       262032      0.8      3.9          strip_op=(strip_op.lstrip('“‘’”')).rstrip('“‘’”')
   325    326300      3346434     10.3     49.3          strip_op= self.rreplace(self.rreplace(self.rreplace(strip_op,"'s","",1),"’s","",1),"’s","",1)
   326    326300       370869      1.1      5.5          prep_article_list=prep_list+article_list
   327    326300       282118      0.9      4.2          word_list=strip_op.split()
   328    910668       691644      0.8     10.2          for i in range(len(word_list)):
   329    619374       332114      0.5      4.9              word=word_list[i]
   330    619374       456990      0.7      6.7              if(word[0].isupper()):
   331    580861       268681      0.5      4.0                  continue
   332                                                       else:
   333     38513        34545      0.9      0.5                  if(word in prep_article_list):
   334      3507         2095      0.6      0.0                      if (i!=0):
   335      3386         1505      0.4      0.0                          continue
   336                                                               else:
   337       121           51      0.4      0.0                          False
   338                                                           else:
   339     35006        20638      0.6      0.3                      return False
   340    291294       135356      0.5      2.0          return True

Total time: 14.1323 s
File: phase2_Trie.py
Function: check_feature_update at line 344

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   344                                               @profile
   345                                               def check_feature_update(self, candidate_tuple,non_discriminative_flag):
   346                                                   #print(candidate_tuple)
   347    814361       413956      0.5      2.9          if(non_discriminative_flag):
   348     39623        17855      0.5      0.1              return 7
   349    774738       390158      0.5      2.8          candidateText=candidate_tuple[0]
   350    774738       367863      0.5      2.6          position=candidate_tuple[1]
   351    774738       723968      0.9      5.1          word_list=candidateText.split()
   352    774738       533975      0.7      3.8          if candidateText.islower():
   353    429142       175462      0.4      1.2              return 6
   354    345596       202769      0.6      1.4          elif candidateText.isupper():
   355     19296         8019      0.4      0.1              return 5
   356    326300       231892      0.7      1.6          elif (len(word_list)==1):
   357                                                       #start-of-sentence-check
   358    112273      3298768     29.4     23.3              if self.all_capitalized(candidateText):
   359    112014       122705      1.1      0.9                  if(int(position[0])==0):
   360     50612        21619      0.4      0.2                      return 4
   361                                                           else:
   362     61402        26562      0.4      0.2                      return 2
   363                                                       else:
   364       259          112      0.4      0.0                  return 3
   365                                                   else:
   366    214027      7503547     35.1     53.1              if(self.all_capitalized(candidateText)):
   367    179280        77230      0.4      0.5                  return 2
   368                                                       else:
   369     34747        15866      0.5      0.1                  return 3

Total time: 37.1871 s
File: phase2_Trie.py
Function: update_Candidatedict at line 371

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   371                                               @profile
   372                                               def update_Candidatedict(self,candidate_tuple,non_discriminative_flag):
   373    814361       435558      0.5      1.2          candidateText=candidate_tuple[0]
   374                                                   #print(candidate_tuple)
   375    814361     13649027     16.8     36.7          normalized_candidate=self.normalize(candidateText)
   376    814361       365559      0.4      1.0          feature_list=[]
   377    814361       871713      1.1      2.3          if(normalized_candidate in self.CandidateBase_dict.keys()):
   378    809274       555367      0.7      1.5              feature_list=self.CandidateBase_dict[normalized_candidate]
   379                                                   else:
   380      5087         5570      1.1      0.0              feature_list=[0]*9
   381      5087         3409      0.7      0.0              feature_list[0]=self.counter
   382      5087         6753      1.3      0.0              feature_list[1]=len(normalized_candidate.split())
   383    814361     19513175     24.0     52.5          feature_to_update=self.check_feature_update(candidate_tuple,non_discriminative_flag)
   384                                                   #print(candidateText,feature_to_update)
   385    814361       750720      0.9      2.0          feature_list[feature_to_update]+=1
   386    814361       532538      0.7      1.4          feature_list[8]+=1
   387    814361       497706      0.6      1.3          self.CandidateBase_dict[normalized_candidate]=feature_list

Total time: 480.595 s
File: phase2_Trie.py
Function: extract at line 392

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   392                                               @profile
   393                                               def extract(self,TweetBase,CTrie,z_score_threshold):
   394                                           
   395                                           
   396         6           43      7.2      0.0          if(self.counter==0):
   397                                                       #output_queue
   398         1         1717   1717.0      0.0              self.data_frame_holder_OQ=pd.DataFrame([], columns=['index','tweetID', 'sentID', 'hashtags', 'user', 'TweetSentence','phase1Candidates', '2nd Iteration Candidates'])
   399         1         1470   1470.0      0.0              self.incomplete_tweets=pd.DataFrame([], columns=['index','tweetID', 'sentID', 'hashtags', 'user', 'TweetSentence','phase1Candidates', '2nd Iteration Candidates'])
   400         1            4      4.0      0.0              self.CandidateBase_dict= {}
   401         1            3      3.0      0.0              self.good_candidates=[]
   402         1            3      3.0      0.0              self.bad_candidates=[]
   403                                           
   404                                           
   405         6        14651   2441.8      0.0          data_frame_holder=pd.DataFrame([], columns=['index','tweetID', 'sentID', 'hashtags', 'user', 'TweetSentence','phase1Candidates', '2nd Iteration Candidates'])
   406         6           25      4.2      0.0          phase1_holder_holder=[]
   407         6           20      3.3      0.0          df_holder=[]
   408         6           19      3.2      0.0          candidateBase_holder=[]
   409                                           
   410                                                   #this has to be changed to an append function since IPQ already has incomplete tweets from prev batch  
   411         6       167807  27967.8      0.0          immediate_processingQueue = pd.concat([TweetBase, self.incomplete_tweets])
   412                                           
   413                                           
   414         6          119     19.8      0.0          print('In Phase 2',len(immediate_processingQueue))
   415                                                   #immediate_processingQueue=immediate_processingQueue.reset_index(drop=True)
   416         6          249     41.5      0.0          combined_list_here=([]+list(cachedStopWords)+chat_word_list+day_list+month_list+article_list+prep_list)
   417         6         3022    503.7      0.0          combined_list_filtered=list(filter(lambda word: word not in (prep_list+article_list+month_list), combined_list_here))
   418                                                   #--------------------------------------PHASE II---------------------------------------------------
   419    285032     51501821    180.7     10.7          for index, row in immediate_processingQueue.iterrows():
   420                                           
   421                                                       #phase 1 candidates for one sentence
   422    285026       849860      3.0      0.2              phase1_holder=[]
   423                                           
   424    285026     10051537     35.3      2.1              tweetText=str(row['TweetSentence'])
   425                                                       #print(tweetText)
   426    285026      6986029     24.5      1.5              sentID=str(row['sentID'])
   427    285026      6384134     22.4      1.3              tweetID=str(row['tweetID'])
   428    285026      6180655     21.7      1.3              phase1Candidates=str(row['phase1Candidates'])
   429    285026      6101422     21.4      1.3              hashtags=str(row['hashtags'])
   430    285026      6087782     21.4      1.3              user=str(row['user'])
   431    285026      6159220     21.6      1.3              batch=str(row['entry_batch'])
   432    285026      7744088     27.2      1.6              time=str(row['start_time'])
   433    285026       735255      2.6      0.2              non_discriminative_flag=False
   434                                           
   435                                           
   436    285026       744407      2.6      0.2              if(phase1Candidates!="nan"):
   437    256036       914294      3.6      0.2                  phase1Raw=phase1Candidates.split("||")
   438    256036      1117513      4.4      0.2                  phase1Raw = list(filter(None, phase1Raw))
   439                                           
   440                                           
   441    542320      1448619      2.7      0.3                  for entities_with_loc in phase1Raw:
   442    286284       866045      3.0      0.2                      entity_to_store=entities_with_loc.split("::")[0]
   443                                                               #print(entity_to_store)
   444    286284       804460      2.8      0.2                      position=entities_with_loc.split("::")[1]
   445                                                               #print(position)
   446    286284       792596      2.8      0.2                      phase1_holder.append((entity_to_store,position))
   447                                           
   448    256036      8882818     34.7      1.8                  phase1_holder_holder.append(copy.deepcopy(phase1_holder))
   449    256036       755173      2.9      0.2                  phase1_holder.clear()
   450                                           
   451                                                       else:
   452     28990        71990      2.5      0.0                  non_discriminative_flag=True
   453     28990        84719      2.9      0.0                  phase1_holder_holder.append([])
   454                                           
   455                                           
   456                                                       #print(sen_index1)[ ()/,;:!?…-]
   457                                                       #splitList=tweetText.split()
   458    285026      4214261     14.8      0.9              splitList=re.split('[ ()/,;:!?…-]',tweetText)
   459                                                       #print(tweetText,splitList)
   460                                                       #wordlstU=list(filter(lambda word: ((word!="")&(word.strip(string.punctuation).strip().lower() not in cachedStopWords)), splitList))
   461    285026      2290136      8.0      0.5              splitList=list(map(lambda word: word.strip(), splitList))
   462    285026      2032812      7.1      0.4              tweetWordList=list(filter(lambda word: word!="", splitList))
   463                                                       #print(tweetWordList)
   464    285026      1940724      6.8      0.4              tweetWordList= [(token,idx) for idx,token in enumerate(tweetWordList)]
   465                                                       
   466                                           
   467                                           
   468                                                       #combined_list_here=([]+list(cachedStopWords)+prep_list+chat_word_list+article_list+day_list+month_list)
   469                                                       
   470    285026     17832389     62.6      3.7              tweetWordList_stopWords=list(filter (lambda word: ((((word[0].strip()).strip(string.punctuation)).lower() in combined_list_filtered)|(word[0].strip() in string.punctuation)|(word[0].startswith('@'))), tweetWordList))
   471                                           
   472                                           
   473                                                       # phase 2 candidate tuples without stopwords for a sentence
   474    285026      2927332     10.3      0.6              c=[(y[0],str(y[1]),tweetID,sentID,'ne',batch,time) for y  in tweetWordList if y not in tweetWordList_stopWords ]
   475                                                       #c=[(y[0],str(y[1])) for y  in tweetWordList if y not in tweetWordList_stopWords ]
   476                                           
   477                                                       #print(c)
   478    285026       866720      3.0      0.2              sequences=[]
   479   1014267      3740013      3.7      0.8              for k, g in groupby(enumerate(c), lambda element: element[0]-int(element[1][1])):
   480    729241      4005590      5.5      0.8                  sequences.append(list(map(itemgetter(1), g)))
   481                                           
   482    285026       830894      2.9      0.2              ne_candidate_list=[]
   483   1014267      2715185      2.7      0.6              for sequence in sequences:
   484                                                           '''print(sequence)
   485                                                           seq_candidates=self.check_sequence(sequence, len(sequence), CTrie)'''
   486                                           
   487    729241    196947538    270.1     41.0                  seq_candidate_list=self.get_Candidates(sequence, CTrie)
   488    729241      1877803      2.6      0.4                  if(seq_candidate_list):
   489                                                               '''seq_candidate_list= list(map(lambda e: self.join_token_tuples(e) ,seq_candidates))
   490                                                               print("====",seq_candidate_list)'''
   491                                           
   492                                                               
   493   1383918      3724909      2.7      0.8                      for candidate_tuple in seq_candidate_list:
   494                                                                   #inserts into CandidateBase and updates the correct frequency feature based on Capitalization pattern
   495    814361     44769463     55.0      9.3                          self.update_Candidatedict(candidate_tuple,non_discriminative_flag)
   496    569557      1600788      2.8      0.3                      ne_candidate_list.extend(seq_candidate_list)
   497                                                       
   498                                                       
   499                                                       #phase2_candidates='||'.join(e[0] for e in ne_candidate_list)
   500                                           
   501    285026     14133639     49.6      2.9              phase2_candidates=[self.normalize(e[0]) for e in ne_candidate_list]
   502                                           
   503                                                       #print(phase1Candidates,"====",phase2_candidates)
   504    285026      1160687      4.1      0.2              dict1 = {'tweetID':tweetID, 'sentID':sentID, 'hashtags':hashtags, 'user':user, 'TweetSentence':tweetText, 'phase1Candidates':phase1Candidates,'2nd Iteration Candidates':phase2_candidates}
   505                                           
   506    285026       779970      2.7      0.2              df_holder.append(dict1)
   507                                                       #-------------------------------------------------------------------END of 1st iteration: RESCAN+CANDIDATE_UPDATION-----------------------------------------------------------
   508                                           
   509                                                   #df_holder is the immediate processing queue of the current batch converted into a dataframe---> data_frame_holder
   510                                                   #self.append_rows(df_holder)
   511         6       652174 108695.7      0.1          data_frame_holder = pd.DataFrame(df_holder)
   512                                           
   513                                                   #convert the CandidateFeatureBase from a dictionary to dataframe---> CandidateFeatureBaseDF
   514         6           40      6.7      0.0          candidateBaseHeaders=['candidate', 'batch', 'length','cap','substring-cap','s-o-sCap','all-cap','non-cap','non-discriminative','cumulative']
   515         6        55085   9180.8      0.0          candidate_featureBase_DF=pd.DataFrame.from_dict(self.CandidateBase_dict, orient='index')
   516         6         1202    200.3      0.0          candidate_featureBase_DF.columns=candidateBaseHeaders[1:]
   517         6           28      4.7      0.0          candidate_featureBase_DF.index.name=candidateBaseHeaders[0]
   518         6         7454   1242.3      0.0          candidate_featureBase_DF = candidate_featureBase_DF.reset_index(drop=False)
   519                                                   #print(candidate_featureBase_DF.head(5))
   520                                           
   521                                                   #filtering test set based on z_score
   522                                           
   523         6         1107    184.5      0.0          mert1=candidate_featureBase_DF['cumulative'].as_matrix()
   524                                                   #frequency_array = np.array(list(map(lambda val: val[0], sortedCandidateDB.values())))
   525         6         1141    190.2      0.0          zscore_array1=stats.zscore(mert1)
   526                                           
   527                                           
   528                                           
   529         6         3137    522.8      0.0          candidate_featureBase_DF['Z_ScoreUnweighted']=zscore_array1
   530                                           
   531                                           
   532         6         9027   1504.5      0.0          candidate_featureBase_DF = candidate_featureBase_DF[candidate_featureBase_DF['Z_ScoreUnweighted'] > z_score_threshold]
   533                                           
   534                                           
   535                                           
   536         6        82799  13799.8      0.0          candidate_featureBase_DF['class']=''
   537                                           
   538                                                   '''
   539                                                   contains code for candidate classification
   540                                                   initialize immediate_processingQueue for phase2 of next batch
   541                                                   VERIFICATION MODULE: START OF 2nd ITERATION
   542                                                   -----puts tweet into output queue or IPQ
   543                                                   '''
   544                                           
   545                                           
   546         6        74657  12442.8      0.0          my_classifier= svm.SVM1('training.csv')
   547         6       120780  20130.0      0.0          candidate_featureBase_DF=my_classifier.run(candidate_featureBase_DF,z_score_threshold)
   548                                           
   549                                           
   550         6      2469176 411529.3      0.5          candidate_featureBase_DF=self.set_readable_labels(candidate_featureBase_DF)
   551                                                   
   552                                           
   553         6       303799  50633.2      0.1          candidate_featureBase_DF.to_csv("candidate_featureBase_DF.csv", sep=',', encoding='utf-8')
   554                                           
   555                                           
   556         6     41238015 6873002.5      8.6          self.incomplete_tweets=self.get_incomplete_tweets_frame(data_frame_holder,candidate_featureBase_DF)
   557                                           
   558         6       807597 134599.5      0.2          self.incomplete_tweets.to_csv("incomplete_tweets.csv", sep=',', encoding='utf-8')
   559                                           
   560                                           
   561                                           
   562         6       807684 134614.0      0.2          self.incomplete_tweets.drop('2nd Iteration Candidates', axis=1, inplace=True)
   563                                           
   564                                           
   565                                           
   566                                                   #final operations
   567         6           44      7.3      0.0          self.counter=self.counter+1
   568         6        97488  16248.0      0.0          del(df_holder)
   569         6        17857   2976.2      0.0          del(immediate_processingQueue)
   570                                                   #print(len(self.CandidateBase_dict))
   571                                                   #return self.data_frame_holder_OQ
   572         6           37      6.2      0.0          return

