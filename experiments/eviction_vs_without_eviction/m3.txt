In Phase 2 31363
In Phase 2 43831
In Phase 2 44511
In Phase 2 49392
In Phase 2 57777
In Phase 2 63862
Wrote profile results to phase2_Trie.py.lprof
Timer unit: 1e-06 s

Total time: 0.935242 s
File: phase2_Trie.py
Function: rreplace at line 44

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    44                                               @profile
    45                                               def rreplace(self,s, old, new, occurrence):
    46   1006230       581620      0.6     62.2          if s.endswith(old):
    47     22286        19305      0.9      2.1              li = s.rsplit(old, occurrence)
    48     22286        11253      0.5      1.2              return new.join(li)
    49                                                   else:
    50    983944       323064      0.3     34.5              return s

Total time: 42.4273 s
File: phase2_Trie.py
Function: get_incomplete_tweets_frame at line 54

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    54                                               @profile
    55                                               def get_incomplete_tweets_frame(self,data_frame_holder,candidate_featureBase_DF):
    56                                                   #print(candidate_featureBase_DF.head())
    57                                           
    58         6        12772   2128.7      0.0          good_candidates=candidate_featureBase_DF[candidate_featureBase_DF.status=="g"].candidate.tolist()
    59         6        11163   1860.5      0.0          bad_candidates=candidate_featureBase_DF[candidate_featureBase_DF.status=="b"].candidate.tolist()
    60                                           
    61         6          283     47.2      0.0          mixed_candidates= good_candidates + bad_candidates
    62                                           
    63                                                   #incomplete_tweets=self.data_frame_holder[set(self.data_frame_holder[0]).issubset(['a', 'b', 'c'] )]
    64                                           
    65         6     42378407 7063067.8     99.9          data_frame_holder['completeness'] = data_frame_holder['2nd Iteration Candidates'].apply(lambda x: set(x).issubset(mixed_candidates))
    66                                           
    67         6        24691   4115.2      0.1          return data_frame_holder[data_frame_holder.completeness==False]

Total time: 2.4968 s
File: phase2_Trie.py
Function: set_readable_labels at line 70

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    70                                               @profile
    71                                               def set_readable_labels(self,candidate_featureBase_DF):
    72                                           
    73                                                   #candidate_featureBase_DF['status'] = candidate_featureBase_DF['probability'].apply(lambda x: set(x).issubset(good_candidates))
    74         6         4728    788.0      0.2          candidate_featureBase_DF['status']='ne'
    75         6       835475 139245.8     33.5          candidate_featureBase_DF['status'][candidate_featureBase_DF['probability']>=0.75]='g'
    76         6       830696 138449.3     33.3          candidate_featureBase_DF['status'][(candidate_featureBase_DF['probability'] > 0.4) & (candidate_featureBase_DF['probability'] < 0.75)] = 'a'
    77         6       825891 137648.5     33.1          candidate_featureBase_DF['status'][candidate_featureBase_DF['probability']<=0.4]='b'
    78                                           
    79         6           10      1.7      0.0          return candidate_featureBase_DF

Total time: 29.4657 s
File: phase2_Trie.py
Function: normalize at line 82

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    82                                               @profile
    83                                               def normalize(self,word):
    84   7700144      3522244      0.5     12.0          strip_op=word
    85   7700144      9301477      1.2     31.6          strip_op=(((strip_op.lstrip(string.punctuation)).rstrip(string.punctuation)).strip()).lower()
    86   7700144      5287360      0.7     17.9          strip_op=(strip_op.lstrip('“‘’”')).rstrip('“‘’”')
    87                                                   #strip_op= self.rreplace(self.rreplace(self.rreplace(strip_op,"'s","",1),"’s","",1),"’s","",1)
    88   7700144      4324754      0.6     14.7          if strip_op.endswith("'s"):
    89    108954       126702      1.2      0.4              li = strip_op.rsplit("'s", 1)
    90    108954        66621      0.6      0.2              return ''.join(li)
    91   7591190      3988138      0.5     13.5          elif strip_op.endswith("’s"):
    92      3880         4426      1.1      0.0              li = strip_op.rsplit("’s", 1)
    93      3880         2372      0.6      0.0              return ''.join(li)
    94                                                   else:
    95   7587310      2841628      0.4      9.6              return strip_op

Total time: 0 s
File: phase2_Trie.py
Function: isSubstring at line 98

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    98                                               @profile      
    99                                               def isSubstring(self,to_increase_element,id_to_incr,comparison_holder,phase1_holder_holder_copy):
   100                                                   combined_list=comparison_holder[id_to_incr]+phase1_holder_holder_copy[id_to_incr]
   101                                           
   102                                                   for idx,val in enumerate(comparison_holder[id_to_incr]):
   103                                                       if((to_increase_element[0] in val[0]) and to_increase_element[0] != val[0]):
   104                                                           if((to_increase_element[5] in val[5]) and to_increase_element[5] != val[5]):
   105                                                               return True
   106                                                   for idx,val in enumerate(phase1_holder_holder_copy[id_to_incr]):
   107                                                       if((to_increase_element[0] in val[0]) and to_increase_element[0] != val[0]):
   108                                                           if((to_increase_element[5] in val[2]) and to_increase_element[5] != val[2]):
   109                                                               return True   
   110                                                           
   111                                                   return False

Total time: 0 s
File: phase2_Trie.py
Function: calculate_pmi at line 113

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   113                                               @profile
   114                                               def calculate_pmi(self,big,x1,x2,total):
   115                                                   big__= float(big/total)
   116                                                   x1__=float(x1/total)
   117                                                   x2__=float(x2/total)
   118                                                   pmi= math.log(big__/(x1__*x2__),2.71828182845)
   119                                                   pklv=big__*pmi
   120                                                   #return (1/(1+math.exp(-1*pmi)))
   121                                                   npmi= pmi/(-1.0*(math.log(big__,2.71828182845)))
   122                                                   return npmi,pklv

Total time: 0 s
File: phase2_Trie.py
Function: transfer at line 127

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   127                                               @profile
   128                                               def transfer(self,to_keep,to_split,classifier_results):
   129                                                   #transfering from to_keep to to_split
   130                                                   #print(classifier_results)
   131                                                   
   132                                                   b_star_list=[]
   133                                                   normal_b_list=[]
   134                                           
   135                                                   classifier_results=classifier_results.reset_index()
   136                                           
   137                                                   g_star_list=[]
   138                                                   normal_g_list=[]
   139                                           
   140                                                   #to_split operations
   141                                                   normal_b_list=classifier_results[(classifier_results.pred_prob2< 0.4)& (classifier_results.candidate.isin(to_split))]
   142                                                   normal_a_list_split=classifier_results[(classifier_results.pred_prob2>= 0.4)& (classifier_results.pred_prob2<0.8) & (classifier_results.candidate.isin(to_split))]
   143                                           
   144                                                   normal_b_list= normal_b_list.candidate.tolist()
   145                                                   normal_a_list_split= normal_a_list_split.candidate.tolist()
   146                                           
   147                                                   merger=[]
   148                                                   merger.extend(normal_a_list_split)
   149                                                   merger.extend(normal_b_list)
   150                                                   b_star_list = [x for x in to_split if x not in merger ]
   151                                           
   152                                                   #to_keep operations
   153                                                   normal_g_list=classifier_results[(classifier_results.pred_prob2> 0.8)& (classifier_results.candidate.isin(to_keep))]
   154                                                   normal_a_list_keep=classifier_results[(classifier_results.pred_prob2>= 0.4)& (classifier_results.pred_prob2<0.8) & (classifier_results.candidate.isin(to_keep))]
   155                                           
   156                                                   normal_a_list_keep= normal_a_list_keep.candidate.tolist()
   157                                                   normal_g_list=normal_g_list.candidate.tolist()
   158                                           
   159                                           
   160                                                   merger2=[]
   161                                                   merger2.extend(normal_a_list_keep)
   162                                                   merger2.extend(normal_g_list)
   163                                           
   164                                                   g_star_list= [x for x in to_keep if x not in merger2 ]
   165                                           
   166                                           
   167                                                   append_to_split_list=classifier_results[(classifier_results.pred_prob2< 0.4)& (classifier_results.candidate.isin(to_keep))]
   168                                           
   169                                                   #stay_same_keep=classifier_results[~((classifier_results.pred_prob2< 0.4)& (classifier_results.candidate.isin(to_keep)))]
   170                                                   append_to_split_list=append_to_split_list.candidate.tolist()
   171                                                   to_keep=[candidate for candidate in to_keep if candidate not in append_to_split_list]
   172                                                   to_split.extend(append_to_split_list)
   173                                                   #print(len(to_split),len(to_keep))
   174                                           
   175                                                   #transfering from to_split to to_keep
   176                                                   append_to_keep_list=classifier_results[(classifier_results.pred_prob2> 0.8)& (classifier_results.candidate.isin(to_split))]
   177                                                   #appending into to keep list
   178                                           
   179                                                   append_to_keep_list=append_to_keep_list.candidate.tolist()
   180                                                   #print(append_to_keep_list)
   181                                           
   182                                                   to_split=[candidate for candidate in to_split if candidate not in append_to_keep_list]
   183                                                   to_keep.extend(append_to_keep_list)
   184                                                   #print(len(to_split),len(to_keep))
   185                                           
   186                                                   #removing from to_split list
   187                                           
   188                                                   #print(len(to_split),len(to_keep))
   189                                                   #
   190                                                   merge_split_keep=[]
   191                                                   merge_split_keep.extend(to_keep)
   192                                                   merge_split_keep.extend(to_split)
   193                                           
   194                                                   to_b=classifier_results[(classifier_results.pred_prob2<= 0.4)& (~(classifier_results.candidate.isin(merge_split_keep)))]
   195                                                   to_g=classifier_results[(classifier_results.pred_prob2>= 0.8)& (~(classifier_results.candidate.isin(merge_split_keep)))]
   196                                                   to_a=classifier_results[(classifier_results.pred_prob2> 0.4)& (classifier_results.pred_prob2<0.8)& (~(classifier_results.candidate.isin(merge_split_keep)))]
   197                                           
   198                                                   return normal_a_list_split,normal_a_list_keep,b_star_list,normal_b_list,g_star_list,normal_g_list,to_b,to_g,to_a

Total time: 0 s
File: phase2_Trie.py
Function: verify at line 200

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   200                                               @profile
   201                                               def verify(self, subsequence, CTrie):
   202                                                   return CTrie.__contains__(subsequence)

Total time: 0 s
File: phase2_Trie.py
Function: check_sequence at line 205

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   205                                               @profile
   206                                               def check_sequence(self, sequence, l, CTrie):
   207                                                   result=[]
   208                                                   subsequence_length=l
   209                                                   while(subsequence_length>0):
   210                                                       shift=len(sequence)-subsequence_length
   211                                                       verified_subsequence=[]
   212                                                       verified=False
   213                                                       for i in range(0,shift+1):
   214                                                           list1=sequence[i:(i+subsequence_length)]
   215                                                           text=' '.join(str(e[0]) for e in list1)
   216                                                           subsequence=(self.normalize(text)).split()
   217                                                           #print("search for", subsequence)
   218                                                           if self.verify(subsequence, CTrie):
   219                                                               verified_subsequence.append(i)
   220                                                               verified_subsequence.append(i+subsequence_length)
   221                                                               #print(subsequence)
   222                                                               #print(subsequence,[(verified_subsequence[0]-0),(int(sequence[-1][1])-verified_subsequence[1])])
   223                                                               verified=True
   224                                                               break
   225                                                       if(verified):
   226                                                           result.append(sequence[verified_subsequence[0]:verified_subsequence[1]])
   227                                                           if(verified_subsequence[0]-0)>0:
   228                                                               subequence_to_check=sequence[0:verified_subsequence[0]]
   229                                                               #since tokens before the starting position of the verified subsequence have already been checked for subsequences of this length
   230                                                               partition_length=min(len(subequence_to_check),(subsequence_length-1))
   231                                                               #print(subequence_to_check)
   232                                                               lst=self.check_sequence(subequence_to_check,partition_length, CTrie)
   233                                                               if(lst):
   234                                                                   result.extend(lst)
   235                                                           if(int(sequence[-1][1])-verified_subsequence[1])>0:
   236                                                               subequence_to_check=sequence[(verified_subsequence[1]):]
   237                                                               #since tokens following the end position of the verified subsequence have not been checked for subsequences of this length
   238                                                               partition_length=min(len(subequence_to_check),(subsequence_length))
   239                                                               #print(subequence_to_check)
   240                                                               lst=self.check_sequence(subequence_to_check,partition_length, CTrie)
   241                                                               if(lst):
   242                                                                   result.extend(lst)
   243                                                           return result
   244                                                       else:
   245                                                           subsequence_length-=1
   246                                                   return result

Total time: 104.698 s
File: phase2_Trie.py
Function: get_Candidates at line 249

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   249                                               @profile
   250                                               def get_Candidates(self, sequence, CTrie):
   251                                                   #print(sequence)
   252    743949       838891      1.1      0.8          candidateList=[]
   253    743949       693666      0.9      0.7          left=0
   254    743949       671825      0.9      0.6          start_node=CTrie
   255    743949       645967      0.9      0.6          last_cand="NAN"
   256    743949       641922      0.9      0.6          last_cand_substr=""
   257    743949       660004      0.9      0.6          reset=False
   258   2756151      3237687      1.2      3.1          for right in range(len(sequence)):
   259   2012202      1787829      0.9      1.7              if(reset):
   260    272743       236064      0.9      0.2                  left=right
   261   2012202      2092616      1.0      2.0              curr_text=sequence[right][0]
   262   2012202      2225620      1.1      2.1              curr_pos=[sequence[right][1]]
   263   2012202     20057779     10.0     19.2              curr=self.normalize(sequence[right][0])
   264                                           
   265   2012202     19186893      9.5     18.3              cand_str=self.normalize(last_cand_substr+" "+curr)
   266   2012202      2645653      1.3      2.5              last_cand_sequence=sequence[left:(right+1)]
   267   2012202      6297741      3.1      6.0              last_cand_text=' '.join(str(e[0]) for e in last_cand_sequence)
   268   2012202     22066760     11.0     21.1              last_cand_text_norm=self.normalize(' '.join(str(e[0]) for e in last_cand_sequence))
   269                                                       #print("==>",cand_str,last_cand_text)
   270   2012202      3789692      1.9      3.6              if ((curr in start_node.path.keys())&(cand_str==last_cand_text_norm)):
   271                                                           #print("=>",cand_str,last_cand_text)
   272   1195925      1090909      0.9      1.0                  reset=False
   273   1195925      1743557      1.5      1.7                  if (start_node.path[curr].value_valid):
   274                                                               #print(last_cand_text)
   275    894589      1810115      2.0      1.7                      last_cand_pos=[e[1] for e in last_cand_sequence]
   276    894589       810893      0.9      0.8                      last_cand=last_cand_text
   277   1195925      1193298      1.0      1.1                  start_node=start_node.path[curr]
   278   1195925      1072801      0.9      1.0                  last_cand_substr=cand_str
   279                                                       else:
   280                                                           #print("=>",cand_str,last_cand_text)
   281    816277       786374      1.0      0.8                  if(last_cand!="NAN"):
   282    360721       421195      1.2      0.4                      candidateList.append((last_cand,last_cand_pos))
   283    816277       745154      0.9      0.7                  last_cand="NAN"
   284    816277       831919      1.0      0.8                  if(start_node!=CTrie):
   285    524634       470829      0.9      0.4                      start_node=CTrie
   286    524634       486745      0.9      0.5                      last_cand_substr=""
   287    524634       724651      1.4      0.7                      if curr in start_node.path.keys():
   288                                                                   #print("here",curr)
   289    320547       287113      0.9      0.3                          reset=False
   290    320547       480309      1.5      0.5                          if start_node.path[curr].value_valid:
   291    254790       236279      0.9      0.2                              last_cand_text=curr_text
   292    254790       227849      0.9      0.2                              last_cand_pos=curr_pos
   293    254790       224702      0.9      0.2                              last_cand=curr
   294    320547       283791      0.9      0.3                          left=right
   295    320547       325140      1.0      0.3                          start_node=start_node.path[curr]
   296    320547       305958      1.0      0.3                          last_cand_substr=curr
   297                                                               else:
   298    204087       180333      0.9      0.2                          reset=True
   299                                                           else:
   300    291643       259312      0.9      0.2                      reset=True
   301                                                   #print(last_cand)
   302    743949       720528      1.0      0.7          if(last_cand!="NAN"):
   303    471048       564024      1.2      0.5              candidateList.append((last_cand,last_cand_pos))
   304    743949       637460      0.9      0.6          return candidateList

Total time: 0 s
File: phase2_Trie.py
Function: append_rows at line 307

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   307                                               @profile
   308                                               def append_rows(self,df_holder):
   309                                               
   310                                                   df = pd.DataFrame(df_holder)
   311                                                   #self.data_frame_holder=self.data_frame_holder.append(df,ignore_index=True)
   312                                                   #self.data_frame_holder=self.data_frame_holder.reset_index(drop=True)
   313                                                   #print(len(self.data_frame_holder))
   314                                                   return df

Total time: 0 s
File: phase2_Trie.py
Function: join_token_tuples at line 318

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   318                                               @profile
   319                                               def join_token_tuples(self,list_of_tuples):
   320                                                   #print(string.punctuation)
   321                                                   combined_str=(' '.join(tuple[0] for tuple in list_of_tuples)).lstrip(string.punctuation).rstrip(string.punctuation).strip()
   322                                                   combined_pos='*'.join(str(tuple[1]) for tuple in list_of_tuples)
   323                                                   combined_tuple=(combined_str,combined_pos,list_of_tuples[0][2],list_of_tuples[0][3],list_of_tuples[0][4],list_of_tuples[0][5],list_of_tuples[0][6])
   324                                                   return combined_tuple

Total time: 7.85134 s
File: phase2_Trie.py
Function: all_capitalized at line 328

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   328                                               @profile
   329                                               def all_capitalized(self,candidate):
   330    335410       194237      0.6      2.5          strip_op=candidate
   331    335410       403271      1.2      5.1          strip_op=(((strip_op.lstrip(string.punctuation)).rstrip(string.punctuation)).strip())
   332    335410       274554      0.8      3.5          strip_op=(strip_op.lstrip('“‘’”')).rstrip('“‘’”')
   333    335410      4162696     12.4     53.0          strip_op= self.rreplace(self.rreplace(self.rreplace(strip_op,"'s","",1),"’s","",1),"’s","",1)
   334    335410       412884      1.2      5.3          prep_article_list=prep_list+article_list
   335    335410       295504      0.9      3.8          word_list=strip_op.split()
   336    943800       748291      0.8      9.5          for i in range(len(word_list)):
   337    643668       359410      0.6      4.6              word=word_list[i]
   338    643668       502980      0.8      6.4              if(word[0].isupper()):
   339    604349       289487      0.5      3.7                  continue
   340                                                       else:
   341     39319        37272      0.9      0.5                  if(word in prep_article_list):
   342      4041         2553      0.6      0.0                      if (i!=0):
   343      3921         1881      0.5      0.0                          continue
   344                                                               else:
   345       120           66      0.6      0.0                          False
   346                                                           else:
   347     35278        21622      0.6      0.3                      return False
   348    300132       144628      0.5      1.8          return True

Total time: 15.6881 s
File: phase2_Trie.py
Function: check_feature_update at line 352

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   352                                               @profile
   353                                               def check_feature_update(self, candidate_tuple,non_discriminative_flag):
   354                                                   #print(candidate_tuple)
   355    831769       428747      0.5      2.7          if(non_discriminative_flag):
   356     40278        17823      0.4      0.1              return 7
   357    791491       396038      0.5      2.5          candidateText=candidate_tuple[0]
   358    791491       370870      0.5      2.4          position=candidate_tuple[1]
   359    791491       735910      0.9      4.7          word_list=candidateText.split()
   360    791491       574279      0.7      3.7          if candidateText.islower():
   361    436068       177056      0.4      1.1              return 6
   362    355423       216494      0.6      1.4          elif candidateText.isupper():
   363     20013         8199      0.4      0.1              return 5
   364    335410       241572      0.7      1.5          elif (len(word_list)==1):
   365                                                       #start-of-sentence-check
   366    112841      3671654     32.5     23.4              if self.all_capitalized(candidateText):
   367    112581       125153      1.1      0.8                  if(int(position[0])==0):
   368     50956        21058      0.4      0.1                      return 4
   369                                                           else:
   370     61625        25395      0.4      0.2                      return 2
   371                                                       else:
   372       260          122      0.5      0.0                  return 3
   373                                                   else:
   374    222569      8580239     38.6     54.7              if(self.all_capitalized(candidateText)):
   375    187551        82105      0.4      0.5                  return 2
   376                                                       else:
   377     35018        15410      0.4      0.1                  return 3

Total time: 33.143 s
File: phase2_Trie.py
Function: update_Candidatedict at line 379

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   379                                               @profile
   380                                               def update_Candidatedict(self,candidate_tuple,non_discriminative_flag):
   381    831769       498538      0.6      1.5          candidateText=candidate_tuple[0]
   382                                                   #print(candidate_tuple)
   383    831769      7659881      9.2     23.1          normalized_candidate=self.normalize(candidateText)
   384    831769       388247      0.5      1.2          feature_list=[]
   385    831769       947866      1.1      2.9          if(normalized_candidate in self.CandidateBase_dict.keys()):
   386    826682       583787      0.7      1.8              feature_list=self.CandidateBase_dict[normalized_candidate]
   387                                                   else:
   388      5087         6032      1.2      0.0              feature_list=[0]*9
   389      5087         3523      0.7      0.0              feature_list[0]=self.counter
   390      5087         7000      1.4      0.0              feature_list[1]=len(normalized_candidate.split())
   391    831769     21104576     25.4     63.7          feature_to_update=self.check_feature_update(candidate_tuple,non_discriminative_flag)
   392                                                   #print(candidateText,feature_to_update)
   393    831769       824194      1.0      2.5          feature_list[feature_to_update]+=1
   394    831769       587766      0.7      1.8          feature_list[8]+=1
   395    831769       531571      0.6      1.6          self.CandidateBase_dict[normalized_candidate]=feature_list

Total time: 439.729 s
File: phase2_Trie.py
Function: extract at line 400

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   400                                               @profile
   401                                               def extract(self,TweetBase,CTrie,z_score_threshold):
   402                                           
   403                                           
   404         6           47      7.8      0.0          if(self.counter==0):
   405                                                       #output_queue
   406         1         2060   2060.0      0.0              self.data_frame_holder_OQ=pd.DataFrame([], columns=['index','tweetID', 'sentID', 'hashtags', 'user', 'TweetSentence','phase1Candidates', '2nd Iteration Candidates'])
   407         1         1490   1490.0      0.0              self.incomplete_tweets=pd.DataFrame([], columns=['index','tweetID', 'sentID', 'hashtags', 'user', 'TweetSentence','phase1Candidates', '2nd Iteration Candidates'])
   408         1            5      5.0      0.0              self.CandidateBase_dict= {}
   409         1            3      3.0      0.0              self.good_candidates=[]
   410         1            3      3.0      0.0              self.bad_candidates=[]
   411                                           
   412                                           
   413         6        13948   2324.7      0.0          data_frame_holder=pd.DataFrame([], columns=['index','tweetID', 'sentID', 'hashtags', 'user', 'TweetSentence','phase1Candidates', '2nd Iteration Candidates'])
   414         6           26      4.3      0.0          phase1_holder_holder=[]
   415         6           17      2.8      0.0          df_holder=[]
   416         6           17      2.8      0.0          candidateBase_holder=[]
   417                                           
   418                                                   #this has to be changed to an append function since IPQ already has incomplete tweets from prev batch  
   419         6       159627  26604.5      0.0          immediate_processingQueue = pd.concat([TweetBase, self.incomplete_tweets])
   420                                           
   421                                           
   422         6          117     19.5      0.0          print('In Phase 2',len(immediate_processingQueue))
   423                                                   #immediate_processingQueue=immediate_processingQueue.reset_index(drop=True)
   424         6          229     38.2      0.0          combined_list_here=([]+list(cachedStopWords)+chat_word_list+day_list+month_list+article_list+prep_list)
   425         6         2931    488.5      0.0          combined_list_filtered=list(filter(lambda word: word not in (prep_list+article_list+month_list), combined_list_here))
   426                                                   #--------------------------------------PHASE II---------------------------------------------------
   427    290742     54394716    187.1     12.4          for index, row in immediate_processingQueue.iterrows():
   428                                           
   429                                                       #phase 1 candidates for one sentence
   430    290736       868148      3.0      0.2              phase1_holder=[]
   431                                           
   432    290736     10352691     35.6      2.4              tweetText=str(row['TweetSentence'])
   433                                                       #print(tweetText)
   434    290736      7288066     25.1      1.7              sentID=str(row['sentID'])
   435    290736      6617701     22.8      1.5              tweetID=str(row['tweetID'])
   436    290736      6450004     22.2      1.5              phase1Candidates=str(row['phase1Candidates'])
   437    290736      6344142     21.8      1.4              hashtags=str(row['hashtags'])
   438    290736      6311794     21.7      1.4              user=str(row['user'])
   439    290736      6395892     22.0      1.5              batch=str(row['entry_batch'])
   440    290736      8189614     28.2      1.9              time=str(row['start_time'])
   441    290736       754981      2.6      0.2              non_discriminative_flag=False
   442                                           
   443                                           
   444    290736       754206      2.6      0.2              if(phase1Candidates!="nan"):
   445    261505       939227      3.6      0.2                  phase1Raw=phase1Candidates.split("||")
   446    261505      1140905      4.4      0.3                  phase1Raw = list(filter(None, phase1Raw))
   447                                           
   448                                           
   449    556818      1494713      2.7      0.3                  for entities_with_loc in phase1Raw:
   450    295313       907654      3.1      0.2                      entity_to_store=entities_with_loc.split("::")[0]
   451                                                               #print(entity_to_store)
   452    295313       839897      2.8      0.2                      position=entities_with_loc.split("::")[1]
   453                                                               #print(position)
   454    295313       817974      2.8      0.2                      phase1_holder.append((entity_to_store,position))
   455                                           
   456    261505      9194110     35.2      2.1                  phase1_holder_holder.append(copy.deepcopy(phase1_holder))
   457    261505       790555      3.0      0.2                  phase1_holder.clear()
   458                                           
   459                                                       else:
   460     29231        72446      2.5      0.0                  non_discriminative_flag=True
   461     29231        86001      2.9      0.0                  phase1_holder_holder.append([])
   462                                           
   463                                           
   464                                                       #print(sen_index1)[ ()/,;:!?…-]
   465                                                       #splitList=tweetText.split()
   466    290736      4474566     15.4      1.0              splitList=re.split('[ ()/,;:!?…-]',tweetText)
   467                                                       #print(tweetText,splitList)
   468                                                       #wordlstU=list(filter(lambda word: ((word!="")&(word.strip(string.punctuation).strip().lower() not in cachedStopWords)), splitList))
   469    290736      2435081      8.4      0.6              splitList=list(map(lambda word: word.strip(), splitList))
   470    290736      2094049      7.2      0.5              tweetWordList=list(filter(lambda word: word!="", splitList))
   471                                                       #print(tweetWordList)
   472    290736      2009056      6.9      0.5              tweetWordList= [(token,idx) for idx,token in enumerate(tweetWordList)]
   473                                                       
   474                                           
   475                                           
   476                                                       #combined_list_here=([]+list(cachedStopWords)+prep_list+chat_word_list+article_list+day_list+month_list)
   477                                                       
   478    290736     18251029     62.8      4.2              tweetWordList_stopWords=list(filter (lambda word: ((((word[0].strip()).strip(string.punctuation)).lower() in combined_list_filtered)|(word[0].strip() in string.punctuation)|(word[0].startswith('@'))), tweetWordList))
   479                                           
   480                                           
   481                                                       # phase 2 candidate tuples without stopwords for a sentence
   482    290736      3070960     10.6      0.7              c=[(y[0],str(y[1]),tweetID,sentID,'ne',batch,time) for y  in tweetWordList if y not in tweetWordList_stopWords ]
   483                                                       #c=[(y[0],str(y[1])) for y  in tweetWordList if y not in tweetWordList_stopWords ]
   484                                           
   485                                                       #print(c)
   486    290736       892322      3.1      0.2              sequences=[]
   487   1034685      3660212      3.5      0.8              for k, g in groupby(enumerate(c), lambda element: element[0]-int(element[1][1])):
   488    743949      4114091      5.5      0.9                  sequences.append(list(map(itemgetter(1), g)))
   489                                           
   490    290736       854245      2.9      0.2              ne_candidate_list=[]
   491   1034685      2781480      2.7      0.6              for sequence in sequences:
   492                                                           '''print(sequence)
   493                                                           seq_candidates=self.check_sequence(sequence, len(sequence), CTrie)'''
   494                                           
   495    743949    157094850    211.2     35.7                  seq_candidate_list=self.get_Candidates(sequence, CTrie)
   496    743949      1920141      2.6      0.4                  if(seq_candidate_list):
   497                                                               '''seq_candidate_list= list(map(lambda e: self.join_token_tuples(e) ,seq_candidates))
   498                                                               print("====",seq_candidate_list)'''
   499                                           
   500                                                               
   501   1414194      3804781      2.7      0.9                      for candidate_tuple in seq_candidate_list:
   502                                                                   #inserts into CandidateBase and updates the correct frequency feature based on Capitalization pattern
   503    831769     41323027     49.7      9.4                          self.update_Candidatedict(candidate_tuple,non_discriminative_flag)
   504    582425      1706020      2.9      0.4                      ne_candidate_list.extend(seq_candidate_list)
   505                                                       
   506                                                       
   507                                                       #phase2_candidates='||'.join(e[0] for e in ne_candidate_list)
   508                                           
   509    290736      8098938     27.9      1.8              phase2_candidates=[self.normalize(e[0]) for e in ne_candidate_list]
   510                                           
   511                                                       #print(phase1Candidates,"====",phase2_candidates)
   512    290736      1161593      4.0      0.3              dict1 = {'tweetID':tweetID, 'sentID':sentID, 'hashtags':hashtags, 'user':user, 'TweetSentence':tweetText, 'phase1Candidates':phase1Candidates,'2nd Iteration Candidates':phase2_candidates}
   513                                           
   514    290736       808315      2.8      0.2              df_holder.append(dict1)
   515                                                       #-------------------------------------------------------------------END of 1st iteration: RESCAN+CANDIDATE_UPDATION-----------------------------------------------------------
   516                                           
   517                                                   #df_holder is the immediate processing queue of the current batch converted into a dataframe---> data_frame_holder
   518                                                   #self.append_rows(df_holder)
   519         6       649254 108209.0      0.1          data_frame_holder = pd.DataFrame(df_holder)
   520                                           
   521                                                   #convert the CandidateFeatureBase from a dictionary to dataframe---> CandidateFeatureBaseDF
   522         6           45      7.5      0.0          candidateBaseHeaders=['candidate', 'batch', 'length','cap','substring-cap','s-o-sCap','all-cap','non-cap','non-discriminative','cumulative']
   523         6        54888   9148.0      0.0          candidate_featureBase_DF=pd.DataFrame.from_dict(self.CandidateBase_dict, orient='index')
   524         6         1101    183.5      0.0          candidate_featureBase_DF.columns=candidateBaseHeaders[1:]
   525         6           26      4.3      0.0          candidate_featureBase_DF.index.name=candidateBaseHeaders[0]
   526         6         7008   1168.0      0.0          candidate_featureBase_DF = candidate_featureBase_DF.reset_index(drop=False)
   527                                                   #print(candidate_featureBase_DF.head(5))
   528                                           
   529                                                   #filtering test set based on z_score
   530                                           
   531         6         1083    180.5      0.0          mert1=candidate_featureBase_DF['cumulative'].as_matrix()
   532                                                   #frequency_array = np.array(list(map(lambda val: val[0], sortedCandidateDB.values())))
   533         6         1057    176.2      0.0          zscore_array1=stats.zscore(mert1)
   534                                           
   535                                           
   536                                           
   537         6         3163    527.2      0.0          candidate_featureBase_DF['Z_ScoreUnweighted']=zscore_array1
   538                                           
   539                                           
   540         6         9071   1511.8      0.0          candidate_featureBase_DF = candidate_featureBase_DF[candidate_featureBase_DF['Z_ScoreUnweighted'] > z_score_threshold]
   541                                           
   542                                           
   543                                           
   544         6        94169  15694.8      0.0          candidate_featureBase_DF['class']=''
   545                                           
   546                                                   '''
   547                                                   contains code for candidate classification
   548                                                   initialize immediate_processingQueue for phase2 of next batch
   549                                                   VERIFICATION MODULE: START OF 2nd ITERATION
   550                                                   -----puts tweet into output queue or IPQ
   551                                                   '''
   552                                           
   553                                           
   554         6        76266  12711.0      0.0          my_classifier= svm.SVM1('training.csv')
   555         6       124048  20674.7      0.0          candidate_featureBase_DF=my_classifier.run(candidate_featureBase_DF,z_score_threshold)
   556                                           
   557                                           
   558         6      2497002 416167.0      0.6          candidate_featureBase_DF=self.set_readable_labels(candidate_featureBase_DF)
   559                                                   
   560                                           
   561         6       302544  50424.0      0.1          candidate_featureBase_DF.to_csv("candidate_featureBase_DF.csv", sep=',', encoding='utf-8')
   562                                           
   563                                           
   564         6     42433597 7072266.2      9.6          self.incomplete_tweets=self.get_incomplete_tweets_frame(data_frame_holder,candidate_featureBase_DF)
   565                                           
   566         6       802847 133807.8      0.2          self.incomplete_tweets.to_csv("incomplete_tweets.csv", sep=',', encoding='utf-8')
   567                                           
   568                                           
   569                                           
   570         6       813583 135597.2      0.2          self.incomplete_tweets.drop('2nd Iteration Candidates', axis=1, inplace=True)
   571                                           
   572                                           
   573                                           
   574                                                   #final operations
   575         6           43      7.2      0.0          self.counter=self.counter+1
   576         6        99726  16621.0      0.0          del(df_holder)
   577         6        17490   2915.0      0.0          del(immediate_processingQueue)
   578                                                   #print(len(self.CandidateBase_dict))
   579                                                   #return self.data_frame_holder_OQ
   580         6           42      7.0      0.0          return

