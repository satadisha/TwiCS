In Phase 2 31363
In Phase 2 43748
In Phase 2 44549
In Phase 2 49906
In Phase 2 50220
In Phase 2 54100
In Phase 2 58325
In Phase 2 60036
In Phase 2 62662
In Phase 2 67150
In Phase 2 66801
In Phase 2 69164
In Phase 2 70344
Wrote profile results to phase2_Trie.py.lprof
Timer unit: 1e-06 s

Total time: 2.17169 s
File: phase2_Trie.py
Function: rreplace at line 44

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    44                                               @profile
    45                                               def rreplace(self,s, old, new, occurrence):
    46   2499411      1342648      0.5     61.8          if s.endswith(old):
    47     54143        42427      0.8      2.0              li = s.rsplit(old, occurrence)
    48     54143        26259      0.5      1.2              return new.join(li)
    49                                                   else:
    50   2445268       760352      0.3     35.0              return s

Total time: 203.572 s
File: phase2_Trie.py
Function: get_incomplete_tweets_frame at line 54

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    54                                               @profile
    55                                               def get_incomplete_tweets_frame(self,data_frame_holder,candidate_featureBase_DF):
    56                                                   #print(candidate_featureBase_DF.head())
    57                                           
    58        13        35940   2764.6      0.0          good_candidates=candidate_featureBase_DF[candidate_featureBase_DF.status=="g"].candidate.tolist()
    59        13        29235   2248.8      0.0          bad_candidates=candidate_featureBase_DF[candidate_featureBase_DF.status=="b"].candidate.tolist()
    60                                           
    61        13          956     73.5      0.0          mixed_candidates= good_candidates + bad_candidates
    62                                           
    63                                                   #incomplete_tweets=self.data_frame_holder[set(self.data_frame_holder[0]).issubset(['a', 'b', 'c'] )]
    64                                           
    65        13    203434504 15648808.0     99.9          data_frame_holder['completeness'] = data_frame_holder['2nd Iteration Candidates'].apply(lambda x: set(x).issubset(mixed_candidates))
    66                                           
    67        13        71308   5485.2      0.0          return data_frame_holder[data_frame_holder.completeness==False]

Total time: 6.27857 s
File: phase2_Trie.py
Function: set_readable_labels at line 70

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    70                                               @profile
    71                                               def set_readable_labels(self,candidate_featureBase_DF):
    72                                           
    73                                                   #candidate_featureBase_DF['status'] = candidate_featureBase_DF['probability'].apply(lambda x: set(x).issubset(good_candidates))
    74        13        10475    805.8      0.2          candidate_featureBase_DF['status']='ne'
    75        13      2082990 160230.0     33.2          candidate_featureBase_DF['status'][candidate_featureBase_DF['probability']>=0.75]='g'
    76        13      2077189 159783.8     33.1          candidate_featureBase_DF['status'][(candidate_featureBase_DF['probability'] > 0.4) & (candidate_featureBase_DF['probability'] < 0.75)] = 'a'
    77        13      2107894 162145.7     33.6          candidate_featureBase_DF['status'][candidate_featureBase_DF['probability']<=0.4]='b'
    78                                           
    79        13           22      1.7      0.0          return candidate_featureBase_DF

Total time: 72.0712 s
File: phase2_Trie.py
Function: normalize at line 82

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    82                                               @profile
    83                                               def normalize(self,word):
    84  19339888      7942435      0.4     11.0          strip_op=word
    85  19339888     22874147      1.2     31.7          strip_op=(((strip_op.lstrip(string.punctuation)).rstrip(string.punctuation)).strip()).lower()
    86  19339888     13060050      0.7     18.1          strip_op=(strip_op.lstrip('“‘’”')).rstrip('“‘’”')
    87                                                   #strip_op= self.rreplace(self.rreplace(self.rreplace(strip_op,"'s","",1),"’s","",1),"’s","",1)
    88  19339888     10647616      0.6     14.8          if strip_op.endswith("'s"):
    89    288776       305090      1.1      0.4              li = strip_op.rsplit("'s", 1)
    90    288776       171744      0.6      0.2              return ''.join(li)
    91  19051112     10007718      0.5     13.9          elif strip_op.endswith("’s"):
    92      8072         8905      1.1      0.0              li = strip_op.rsplit("’s", 1)
    93      8072         5059      0.6      0.0              return ''.join(li)
    94                                                   else:
    95  19043040      7048481      0.4      9.8              return strip_op

Total time: 0 s
File: phase2_Trie.py
Function: isSubstring at line 98

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    98                                               @profile      
    99                                               def isSubstring(self,to_increase_element,id_to_incr,comparison_holder,phase1_holder_holder_copy):
   100                                                   combined_list=comparison_holder[id_to_incr]+phase1_holder_holder_copy[id_to_incr]
   101                                           
   102                                                   for idx,val in enumerate(comparison_holder[id_to_incr]):
   103                                                       if((to_increase_element[0] in val[0]) and to_increase_element[0] != val[0]):
   104                                                           if((to_increase_element[5] in val[5]) and to_increase_element[5] != val[5]):
   105                                                               return True
   106                                                   for idx,val in enumerate(phase1_holder_holder_copy[id_to_incr]):
   107                                                       if((to_increase_element[0] in val[0]) and to_increase_element[0] != val[0]):
   108                                                           if((to_increase_element[5] in val[2]) and to_increase_element[5] != val[2]):
   109                                                               return True   
   110                                                           
   111                                                   return False

Total time: 0 s
File: phase2_Trie.py
Function: calculate_pmi at line 113

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   113                                               @profile
   114                                               def calculate_pmi(self,big,x1,x2,total):
   115                                                   big__= float(big/total)
   116                                                   x1__=float(x1/total)
   117                                                   x2__=float(x2/total)
   118                                                   pmi= math.log(big__/(x1__*x2__),2.71828182845)
   119                                                   pklv=big__*pmi
   120                                                   #return (1/(1+math.exp(-1*pmi)))
   121                                                   npmi= pmi/(-1.0*(math.log(big__,2.71828182845)))
   122                                                   return npmi,pklv

Total time: 0 s
File: phase2_Trie.py
Function: transfer at line 127

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   127                                               @profile
   128                                               def transfer(self,to_keep,to_split,classifier_results):
   129                                                   #transfering from to_keep to to_split
   130                                                   #print(classifier_results)
   131                                                   
   132                                                   b_star_list=[]
   133                                                   normal_b_list=[]
   134                                           
   135                                                   classifier_results=classifier_results.reset_index()
   136                                           
   137                                                   g_star_list=[]
   138                                                   normal_g_list=[]
   139                                           
   140                                                   #to_split operations
   141                                                   normal_b_list=classifier_results[(classifier_results.pred_prob2< 0.4)& (classifier_results.candidate.isin(to_split))]
   142                                                   normal_a_list_split=classifier_results[(classifier_results.pred_prob2>= 0.4)& (classifier_results.pred_prob2<0.8) & (classifier_results.candidate.isin(to_split))]
   143                                           
   144                                                   normal_b_list= normal_b_list.candidate.tolist()
   145                                                   normal_a_list_split= normal_a_list_split.candidate.tolist()
   146                                           
   147                                                   merger=[]
   148                                                   merger.extend(normal_a_list_split)
   149                                                   merger.extend(normal_b_list)
   150                                                   b_star_list = [x for x in to_split if x not in merger ]
   151                                           
   152                                                   #to_keep operations
   153                                                   normal_g_list=classifier_results[(classifier_results.pred_prob2> 0.8)& (classifier_results.candidate.isin(to_keep))]
   154                                                   normal_a_list_keep=classifier_results[(classifier_results.pred_prob2>= 0.4)& (classifier_results.pred_prob2<0.8) & (classifier_results.candidate.isin(to_keep))]
   155                                           
   156                                                   normal_a_list_keep= normal_a_list_keep.candidate.tolist()
   157                                                   normal_g_list=normal_g_list.candidate.tolist()
   158                                           
   159                                           
   160                                                   merger2=[]
   161                                                   merger2.extend(normal_a_list_keep)
   162                                                   merger2.extend(normal_g_list)
   163                                           
   164                                                   g_star_list= [x for x in to_keep if x not in merger2 ]
   165                                           
   166                                           
   167                                                   append_to_split_list=classifier_results[(classifier_results.pred_prob2< 0.4)& (classifier_results.candidate.isin(to_keep))]
   168                                           
   169                                                   #stay_same_keep=classifier_results[~((classifier_results.pred_prob2< 0.4)& (classifier_results.candidate.isin(to_keep)))]
   170                                                   append_to_split_list=append_to_split_list.candidate.tolist()
   171                                                   to_keep=[candidate for candidate in to_keep if candidate not in append_to_split_list]
   172                                                   to_split.extend(append_to_split_list)
   173                                                   #print(len(to_split),len(to_keep))
   174                                           
   175                                                   #transfering from to_split to to_keep
   176                                                   append_to_keep_list=classifier_results[(classifier_results.pred_prob2> 0.8)& (classifier_results.candidate.isin(to_split))]
   177                                                   #appending into to keep list
   178                                           
   179                                                   append_to_keep_list=append_to_keep_list.candidate.tolist()
   180                                                   #print(append_to_keep_list)
   181                                           
   182                                                   to_split=[candidate for candidate in to_split if candidate not in append_to_keep_list]
   183                                                   to_keep.extend(append_to_keep_list)
   184                                                   #print(len(to_split),len(to_keep))
   185                                           
   186                                                   #removing from to_split list
   187                                           
   188                                                   #print(len(to_split),len(to_keep))
   189                                                   #
   190                                                   merge_split_keep=[]
   191                                                   merge_split_keep.extend(to_keep)
   192                                                   merge_split_keep.extend(to_split)
   193                                           
   194                                                   to_b=classifier_results[(classifier_results.pred_prob2<= 0.4)& (~(classifier_results.candidate.isin(merge_split_keep)))]
   195                                                   to_g=classifier_results[(classifier_results.pred_prob2>= 0.8)& (~(classifier_results.candidate.isin(merge_split_keep)))]
   196                                                   to_a=classifier_results[(classifier_results.pred_prob2> 0.4)& (classifier_results.pred_prob2<0.8)& (~(classifier_results.candidate.isin(merge_split_keep)))]
   197                                           
   198                                                   return normal_a_list_split,normal_a_list_keep,b_star_list,normal_b_list,g_star_list,normal_g_list,to_b,to_g,to_a

Total time: 0 s
File: phase2_Trie.py
Function: verify at line 200

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   200                                               @profile
   201                                               def verify(self, subsequence, CTrie):
   202                                                   return CTrie.__contains__(subsequence)

Total time: 0 s
File: phase2_Trie.py
Function: check_sequence at line 205

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   205                                               @profile
   206                                               def check_sequence(self, sequence, l, CTrie):
   207                                                   result=[]
   208                                                   subsequence_length=l
   209                                                   while(subsequence_length>0):
   210                                                       shift=len(sequence)-subsequence_length
   211                                                       verified_subsequence=[]
   212                                                       verified=False
   213                                                       for i in range(0,shift+1):
   214                                                           list1=sequence[i:(i+subsequence_length)]
   215                                                           text=' '.join(str(e[0]) for e in list1)
   216                                                           subsequence=(self.normalize(text)).split()
   217                                                           #print("search for", subsequence)
   218                                                           if self.verify(subsequence, CTrie):
   219                                                               verified_subsequence.append(i)
   220                                                               verified_subsequence.append(i+subsequence_length)
   221                                                               #print(subsequence)
   222                                                               #print(subsequence,[(verified_subsequence[0]-0),(int(sequence[-1][1])-verified_subsequence[1])])
   223                                                               verified=True
   224                                                               break
   225                                                       if(verified):
   226                                                           result.append(sequence[verified_subsequence[0]:verified_subsequence[1]])
   227                                                           if(verified_subsequence[0]-0)>0:
   228                                                               subequence_to_check=sequence[0:verified_subsequence[0]]
   229                                                               #since tokens before the starting position of the verified subsequence have already been checked for subsequences of this length
   230                                                               partition_length=min(len(subequence_to_check),(subsequence_length-1))
   231                                                               #print(subequence_to_check)
   232                                                               lst=self.check_sequence(subequence_to_check,partition_length, CTrie)
   233                                                               if(lst):
   234                                                                   result.extend(lst)
   235                                                           if(int(sequence[-1][1])-verified_subsequence[1])>0:
   236                                                               subequence_to_check=sequence[(verified_subsequence[1]):]
   237                                                               #since tokens following the end position of the verified subsequence have not been checked for subsequences of this length
   238                                                               partition_length=min(len(subequence_to_check),(subsequence_length))
   239                                                               #print(subequence_to_check)
   240                                                               lst=self.check_sequence(subequence_to_check,partition_length, CTrie)
   241                                                               if(lst):
   242                                                                   result.extend(lst)
   243                                                           return result
   244                                                       else:
   245                                                           subsequence_length-=1
   246                                                   return result

Total time: 251.538 s
File: phase2_Trie.py
Function: get_Candidates at line 249

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   249                                               @profile
   250                                               def get_Candidates(self, sequence, CTrie):
   251                                                   #print(sequence)
   252   1885520      1987090      1.1      0.8          candidateList=[]
   253   1885520      1758713      0.9      0.7          left=0
   254   1885520      1697691      0.9      0.7          start_node=CTrie
   255   1885520      1636140      0.9      0.7          last_cand="NAN"
   256   1885520      1617791      0.9      0.6          last_cand_substr=""
   257   1885520      1654609      0.9      0.7          reset=False
   258   6865348      7951903      1.2      3.2          for right in range(len(sequence)):
   259   4979828      4408157      0.9      1.8              if(reset):
   260    603384       522843      0.9      0.2                  left=right
   261   4979828      4996050      1.0      2.0              curr_text=sequence[right][0]
   262   4979828      5331822      1.1      2.1              curr_pos=[sequence[right][1]]
   263   4979828     47506478      9.5     18.9              curr=self.normalize(sequence[right][0])
   264                                           
   265   4979828     45279574      9.1     18.0              cand_str=self.normalize(last_cand_substr+" "+curr)
   266   4979828      6264149      1.3      2.5              last_cand_sequence=sequence[left:(right+1)]
   267   4979828     14963360      3.0      5.9              last_cand_text=' '.join(str(e[0]) for e in last_cand_sequence)
   268   4979828     52061782     10.5     20.7              last_cand_text_norm=self.normalize(' '.join(str(e[0]) for e in last_cand_sequence))
   269                                                       #print("==>",cand_str,last_cand_text)
   270   4979828      9094720      1.8      3.6              if ((curr in start_node.path.keys())&(cand_str==last_cand_text_norm)):
   271                                                           #print("=>",cand_str,last_cand_text)
   272   2948960      2681681      0.9      1.1                  reset=False
   273   2948960      4219433      1.4      1.7                  if (start_node.path[curr].value_valid):
   274                                                               #print(last_cand_text)
   275   2228558      4288172      1.9      1.7                      last_cand_pos=[e[1] for e in last_cand_sequence]
   276   2228558      1996860      0.9      0.8                      last_cand=last_cand_text
   277   2948960      2912395      1.0      1.2                  start_node=start_node.path[curr]
   278   2948960      2617991      0.9      1.0                  last_cand_substr=cand_str
   279                                                       else:
   280                                                           #print("=>",cand_str,last_cand_text)
   281   2030868      1941337      1.0      0.8                  if(last_cand!="NAN"):
   282    939956      1096537      1.2      0.4                      candidateList.append((last_cand,last_cand_pos))
   283   2030868      1858665      0.9      0.7                  last_cand="NAN"
   284   2030868      2045277      1.0      0.8                  if(start_node!=CTrie):
   285   1404128      1254518      0.9      0.5                      start_node=CTrie
   286   1404128      1290477      0.9      0.5                      last_cand_substr=""
   287   1404128      1926140      1.4      0.8                      if curr in start_node.path.keys():
   288                                                                   #print("here",curr)
   289    929535       830870      0.9      0.3                          reset=False
   290    929535      1357776      1.5      0.5                          if start_node.path[curr].value_valid:
   291    731563       674993      0.9      0.3                              last_cand_text=curr_text
   292    731563       655719      0.9      0.3                              last_cand_pos=curr_pos
   293    731563       643827      0.9      0.3                              last_cand=curr
   294    929535       817500      0.9      0.3                          left=right
   295    929535       932962      1.0      0.4                          start_node=start_node.path[curr]
   296    929535       878771      0.9      0.3                          last_cand_substr=curr
   297                                                               else:
   298    474593       416403      0.9      0.2                          reset=True
   299                                                           else:
   300    626740       557333      0.9      0.2                      reset=True
   301                                                   #print(last_cand)
   302   1885520      1822476      1.0      0.7          if(last_cand!="NAN"):
   303   1260246      1487623      1.2      0.6              candidateList.append((last_cand,last_cand_pos))
   304   1885520      1599222      0.8      0.6          return candidateList

Total time: 0 s
File: phase2_Trie.py
Function: append_rows at line 307

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   307                                               @profile
   308                                               def append_rows(self,df_holder):
   309                                               
   310                                                   df = pd.DataFrame(df_holder)
   311                                                   #self.data_frame_holder=self.data_frame_holder.append(df,ignore_index=True)
   312                                                   #self.data_frame_holder=self.data_frame_holder.reset_index(drop=True)
   313                                                   #print(len(self.data_frame_holder))
   314                                                   return df

Total time: 0 s
File: phase2_Trie.py
Function: join_token_tuples at line 318

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   318                                               @profile
   319                                               def join_token_tuples(self,list_of_tuples):
   320                                                   #print(string.punctuation)
   321                                                   combined_str=(' '.join(tuple[0] for tuple in list_of_tuples)).lstrip(string.punctuation).rstrip(string.punctuation).strip()
   322                                                   combined_pos='*'.join(str(tuple[1]) for tuple in list_of_tuples)
   323                                                   combined_tuple=(combined_str,combined_pos,list_of_tuples[0][2],list_of_tuples[0][3],list_of_tuples[0][4],list_of_tuples[0][5],list_of_tuples[0][6])
   324                                                   return combined_tuple

Total time: 18.2017 s
File: phase2_Trie.py
Function: all_capitalized at line 328

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   328                                               @profile
   329                                               def all_capitalized(self,candidate):
   330    833137       469484      0.6      2.6          strip_op=candidate
   331    833137       997958      1.2      5.5          strip_op=(((strip_op.lstrip(string.punctuation)).rstrip(string.punctuation)).strip())
   332    833137       674576      0.8      3.7          strip_op=(strip_op.lstrip('“‘’”')).rstrip('“‘’”')
   333    833137      9582184     11.5     52.6          strip_op= self.rreplace(self.rreplace(self.rreplace(strip_op,"'s","",1),"’s","",1),"’s","",1)
   334    833137       903386      1.1      5.0          prep_article_list=prep_list+article_list
   335    833137       716341      0.9      3.9          word_list=strip_op.split()
   336   2250954      1723036      0.8      9.5          for i in range(len(word_list)):
   337   1515813       831243      0.5      4.6              word=word_list[i]
   338   1515813      1126243      0.7      6.2              if(word[0].isupper()):
   339   1406937       658334      0.5      3.6                  continue
   340                                                       else:
   341    108876        96848      0.9      0.5                  if(word in prep_article_list):
   342     10880         6573      0.6      0.0                      if (i!=0):
   343     10569         4651      0.4      0.0                          continue
   344                                                               else:
   345       311          159      0.5      0.0                          False
   346                                                           else:
   347     97996        58940      0.6      0.3                      return False
   348    735141       351695      0.5      1.9          return True

Total time: 36.9085 s
File: phase2_Trie.py
Function: check_feature_update at line 352

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   352                                               @profile
   353                                               def check_feature_update(self, candidate_tuple,non_discriminative_flag):
   354                                                   #print(candidate_tuple)
   355   2200202      1030043      0.5      2.8          if(non_discriminative_flag):
   356    147041        63722      0.4      0.2              return 7
   357   2053161       968503      0.5      2.6          candidateText=candidate_tuple[0]
   358   2053161       925428      0.5      2.5          position=candidate_tuple[1]
   359   2053161      1796772      0.9      4.9          word_list=candidateText.split()
   360   2053161      1341492      0.7      3.6          if candidateText.islower():
   361   1180168       463593      0.4      1.3              return 6
   362    872993       528786      0.6      1.4          elif candidateText.isupper():
   363     39856        15908      0.4      0.0              return 5
   364    833137       572396      0.7      1.6          elif (len(word_list)==1):
   365                                                       #start-of-sentence-check
   366    325851     10046566     30.8     27.2              if self.all_capitalized(candidateText):
   367    325052       344762      1.1      0.9                  if(int(position[0])==0):
   368    156457        61336      0.4      0.2                      return 4
   369                                                           else:
   370    168595        66074      0.4      0.2                      return 2
   371                                                       else:
   372       799          334      0.4      0.0                  return 3
   373                                                   else:
   374    507286     18482625     36.4     50.1              if(self.all_capitalized(candidateText)):
   375    410089       160294      0.4      0.4                  return 2
   376                                                       else:
   377     97197        39916      0.4      0.1                  return 3

Total time: 80.0723 s
File: phase2_Trie.py
Function: update_Candidatedict at line 379

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   379                                               @profile
   380                                               def update_Candidatedict(self,candidate_tuple,non_discriminative_flag):
   381   2200202      1193225      0.5      1.5          candidateText=candidate_tuple[0]
   382                                                   #print(candidate_tuple)
   383   2200202     19220421      8.7     24.0          normalized_candidate=self.normalize(candidateText)
   384   2200202       975621      0.4      1.2          feature_list=[]
   385   2200202      2428931      1.1      3.0          if(normalized_candidate in self.CandidateBase_dict.keys()):
   386   2190838      1525616      0.7      1.9              feature_list=self.CandidateBase_dict[normalized_candidate]
   387                                                   else:
   388      9364        10953      1.2      0.0              feature_list=[0]*9
   389      9364         6574      0.7      0.0              feature_list[0]=self.counter
   390      9364        12789      1.4      0.0              feature_list[1]=len(normalized_candidate.split())
   391   2200202     49782500     22.6     62.2          feature_to_update=self.check_feature_update(candidate_tuple,non_discriminative_flag)
   392                                                   #print(candidateText,feature_to_update)
   393   2200202      2059846      0.9      2.6          feature_list[feature_to_update]+=1
   394   2200202      1497206      0.7      1.9          feature_list[8]+=1
   395   2200202      1358640      0.6      1.7          self.CandidateBase_dict[normalized_candidate]=feature_list

Total time: 1165.68 s
File: phase2_Trie.py
Function: extract at line 400

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   400                                               @profile
   401                                               def extract(self,TweetBase,CTrie,z_score_threshold):
   402                                           
   403                                           
   404        13           87      6.7      0.0          if(self.counter==0):
   405                                                       #output_queue
   406         1         1902   1902.0      0.0              self.data_frame_holder_OQ=pd.DataFrame([], columns=['index','tweetID', 'sentID', 'hashtags', 'user', 'TweetSentence','phase1Candidates', '2nd Iteration Candidates'])
   407         1         1568   1568.0      0.0              self.incomplete_tweets=pd.DataFrame([], columns=['index','tweetID', 'sentID', 'hashtags', 'user', 'TweetSentence','phase1Candidates', '2nd Iteration Candidates'])
   408         1            4      4.0      0.0              self.CandidateBase_dict= {}
   409         1            3      3.0      0.0              self.good_candidates=[]
   410         1            3      3.0      0.0              self.bad_candidates=[]
   411                                           
   412                                           
   413        13        30964   2381.8      0.0          data_frame_holder=pd.DataFrame([], columns=['index','tweetID', 'sentID', 'hashtags', 'user', 'TweetSentence','phase1Candidates', '2nd Iteration Candidates'])
   414        13           61      4.7      0.0          phase1_holder_holder=[]
   415        13           42      3.2      0.0          df_holder=[]
   416        13           43      3.3      0.0          candidateBase_holder=[]
   417                                           
   418                                                   #this has to be changed to an append function since IPQ already has incomplete tweets from prev batch  
   419        13       414054  31850.3      0.0          immediate_processingQueue = pd.concat([TweetBase, self.incomplete_tweets])
   420                                           
   421                                           
   422        13          258     19.8      0.0          print('In Phase 2',len(immediate_processingQueue))
   423                                                   #immediate_processingQueue=immediate_processingQueue.reset_index(drop=True)
   424        13          576     44.3      0.0          combined_list_here=([]+list(cachedStopWords)+chat_word_list+day_list+month_list+article_list+prep_list)
   425        13         7206    554.3      0.0          combined_list_filtered=list(filter(lambda word: word not in (prep_list+article_list+month_list), combined_list_here))
   426                                                   #--------------------------------------PHASE II---------------------------------------------------
   427    728381    128934904    177.0     11.1          for index, row in immediate_processingQueue.iterrows():
   428                                           
   429                                                       #phase 1 candidates for one sentence
   430    728368      2144338      2.9      0.2              phase1_holder=[]
   431                                           
   432    728368     24695353     33.9      2.1              tweetText=str(row['TweetSentence'])
   433                                                       #print(tweetText)
   434    728368     17516108     24.0      1.5              sentID=str(row['sentID'])
   435    728368     16048639     22.0      1.4              tweetID=str(row['tweetID'])
   436    728368     15642089     21.5      1.3              phase1Candidates=str(row['phase1Candidates'])
   437    728368     15503638     21.3      1.3              hashtags=str(row['hashtags'])
   438    728368     15476851     21.2      1.3              user=str(row['user'])
   439    728368     15648790     21.5      1.3              batch=str(row['entry_batch'])
   440    728368     19206993     26.4      1.6              time=str(row['start_time'])
   441    728368      1888266      2.6      0.2              non_discriminative_flag=False
   442                                           
   443                                           
   444    728368      1874149      2.6      0.2              if(phase1Candidates!="nan"):
   445    633324      2215518      3.5      0.2                  phase1Raw=phase1Candidates.split("||")
   446    633324      2731895      4.3      0.2                  phase1Raw = list(filter(None, phase1Raw))
   447                                           
   448                                           
   449   1351558      3602604      2.7      0.3                  for entities_with_loc in phase1Raw:
   450    718234      2163596      3.0      0.2                      entity_to_store=entities_with_loc.split("::")[0]
   451                                                               #print(entity_to_store)
   452    718234      2009397      2.8      0.2                      position=entities_with_loc.split("::")[1]
   453                                                               #print(position)
   454    718234      1976987      2.8      0.2                      phase1_holder.append((entity_to_store,position))
   455                                           
   456    633324     21304741     33.6      1.8                  phase1_holder_holder.append(copy.deepcopy(phase1_holder))
   457    633324      1828817      2.9      0.2                  phase1_holder.clear()
   458                                           
   459                                                       else:
   460     95044       233715      2.5      0.0                  non_discriminative_flag=True
   461     95044       277631      2.9      0.0                  phase1_holder_holder.append([])
   462                                           
   463                                           
   464                                                       #print(sen_index1)[ ()/,;:!?…-]
   465                                                       #splitList=tweetText.split()
   466    728368     10602518     14.6      0.9              splitList=re.split('[ ()/,;:!?…-]',tweetText)
   467                                                       #print(tweetText,splitList)
   468                                                       #wordlstU=list(filter(lambda word: ((word!="")&(word.strip(string.punctuation).strip().lower() not in cachedStopWords)), splitList))
   469    728368      5831133      8.0      0.5              splitList=list(map(lambda word: word.strip(), splitList))
   470    728368      5128952      7.0      0.4              tweetWordList=list(filter(lambda word: word!="", splitList))
   471                                                       #print(tweetWordList)
   472    728368      4567426      6.3      0.4              tweetWordList= [(token,idx) for idx,token in enumerate(tweetWordList)]
   473                                                       
   474                                           
   475                                           
   476                                                       #combined_list_here=([]+list(cachedStopWords)+prep_list+chat_word_list+article_list+day_list+month_list)
   477                                                       
   478    728368     44453330     61.0      3.8              tweetWordList_stopWords=list(filter (lambda word: ((((word[0].strip()).strip(string.punctuation)).lower() in combined_list_filtered)|(word[0].strip() in string.punctuation)|(word[0].startswith('@'))), tweetWordList))
   479                                           
   480                                           
   481                                                       # phase 2 candidate tuples without stopwords for a sentence
   482    728368      7542427     10.4      0.6              c=[(y[0],str(y[1]),tweetID,sentID,'ne',batch,time) for y  in tweetWordList if y not in tweetWordList_stopWords ]
   483                                                       #c=[(y[0],str(y[1])) for y  in tweetWordList if y not in tweetWordList_stopWords ]
   484                                           
   485                                                       #print(c)
   486    728368      2192513      3.0      0.2              sequences=[]
   487   2613888      9139424      3.5      0.8              for k, g in groupby(enumerate(c), lambda element: element[0]-int(element[1][1])):
   488   1885520     10278332      5.5      0.9                  sequences.append(list(map(itemgetter(1), g)))
   489                                           
   490    728368      2104162      2.9      0.2              ne_candidate_list=[]
   491   2613888      6939208      2.7      0.6              for sequence in sequences:
   492                                                           '''print(sequence)
   493                                                           seq_candidates=self.check_sequence(sequence, len(sequence), CTrie)'''
   494                                           
   495   1885520    380471688    201.8     32.6                  seq_candidate_list=self.get_Candidates(sequence, CTrie)
   496   1885520      4773443      2.5      0.4                  if(seq_candidate_list):
   497                                                               '''seq_candidate_list= list(map(lambda e: self.join_token_tuples(e) ,seq_candidates))
   498                                                               print("====",seq_candidate_list)'''
   499                                           
   500                                                               
   501   3724282      9844847      2.6      0.8                      for candidate_tuple in seq_candidate_list:
   502                                                                   #inserts into CandidateBase and updates the correct frequency feature based on Capitalization pattern
   503   2200202    100904337     45.9      8.7                          self.update_Candidatedict(candidate_tuple,non_discriminative_flag)
   504   1524080      4265595      2.8      0.4                      ne_candidate_list.extend(seq_candidate_list)
   505                                                       
   506                                                       
   507                                                       #phase2_candidates='||'.join(e[0] for e in ne_candidate_list)
   508                                           
   509    728368     20175968     27.7      1.7              phase2_candidates=[self.normalize(e[0]) for e in ne_candidate_list]
   510                                           
   511                                                       #print(phase1Candidates,"====",phase2_candidates)
   512    728368      2871248      3.9      0.2              dict1 = {'tweetID':tweetID, 'sentID':sentID, 'hashtags':hashtags, 'user':user, 'TweetSentence':tweetText, 'phase1Candidates':phase1Candidates,'2nd Iteration Candidates':phase2_candidates}
   513                                           
   514    728368      1959033      2.7      0.2              df_holder.append(dict1)
   515                                                       #-------------------------------------------------------------------END of 1st iteration: RESCAN+CANDIDATE_UPDATION-----------------------------------------------------------
   516                                           
   517                                                   #df_holder is the immediate processing queue of the current batch converted into a dataframe---> data_frame_holder
   518                                                   #self.append_rows(df_holder)
   519        13      1671430 128571.5      0.1          data_frame_holder = pd.DataFrame(df_holder)
   520                                           
   521                                                   #convert the CandidateFeatureBase from a dictionary to dataframe---> CandidateFeatureBaseDF
   522        13           74      5.7      0.0          candidateBaseHeaders=['candidate', 'batch', 'length','cap','substring-cap','s-o-sCap','all-cap','non-cap','non-discriminative','cumulative']
   523        13       159034  12233.4      0.0          candidate_featureBase_DF=pd.DataFrame.from_dict(self.CandidateBase_dict, orient='index')
   524        13         2371    182.4      0.0          candidate_featureBase_DF.columns=candidateBaseHeaders[1:]
   525        13           63      4.8      0.0          candidate_featureBase_DF.index.name=candidateBaseHeaders[0]
   526        13        16210   1246.9      0.0          candidate_featureBase_DF = candidate_featureBase_DF.reset_index(drop=False)
   527                                                   #print(candidate_featureBase_DF.head(5))
   528                                           
   529                                                   #filtering test set based on z_score
   530                                           
   531        13         2330    179.2      0.0          mert1=candidate_featureBase_DF['cumulative'].as_matrix()
   532                                                   #frequency_array = np.array(list(map(lambda val: val[0], sortedCandidateDB.values())))
   533        13         2543    195.6      0.0          zscore_array1=stats.zscore(mert1)
   534                                           
   535                                           
   536                                           
   537        13         6620    509.2      0.0          candidate_featureBase_DF['Z_ScoreUnweighted']=zscore_array1
   538                                           
   539                                           
   540        13        25089   1929.9      0.0          candidate_featureBase_DF = candidate_featureBase_DF[candidate_featureBase_DF['Z_ScoreUnweighted'] > z_score_threshold]
   541                                           
   542                                           
   543                                           
   544        13       125738   9672.2      0.0          candidate_featureBase_DF['class']=''
   545                                           
   546                                                   '''
   547                                                   contains code for candidate classification
   548                                                   initialize immediate_processingQueue for phase2 of next batch
   549                                                   VERIFICATION MODULE: START OF 2nd ITERATION
   550                                                   -----puts tweet into output queue or IPQ
   551                                                   '''
   552                                           
   553                                           
   554        13       165014  12693.4      0.0          my_classifier= svm.SVM1('training.csv')
   555        13       316824  24371.1      0.0          candidate_featureBase_DF=my_classifier.run(candidate_featureBase_DF,z_score_threshold)
   556                                           
   557                                           
   558        13      6279004 483000.3      0.5          candidate_featureBase_DF=self.set_readable_labels(candidate_featureBase_DF)
   559                                                   
   560                                           
   561        13      1026309  78946.8      0.1          candidate_featureBase_DF.to_csv("candidate_featureBase_DF.csv", sep=',', encoding='utf-8')
   562                                           
   563                                           
   564        13    203594632 15661125.5     17.5          self.incomplete_tweets=self.get_incomplete_tweets_frame(data_frame_holder,candidate_featureBase_DF)
   565                                           
   566        13      2470271 190020.8      0.2          self.incomplete_tweets.to_csv("incomplete_tweets.csv", sep=',', encoding='utf-8')
   567                                           
   568                                           
   569                                           
   570        13      2082454 160188.8      0.2          self.incomplete_tweets.drop('2nd Iteration Candidates', axis=1, inplace=True)
   571                                           
   572                                           
   573                                           
   574                                                   #final operations
   575        13           98      7.5      0.0          self.counter=self.counter+1
   576        13       257960  19843.1      0.0          del(df_holder)
   577        13        46937   3610.5      0.0          del(immediate_processingQueue)
   578                                                   #print(len(self.CandidateBase_dict))
   579                                                   #return self.data_frame_holder_OQ
   580        13           77      5.9      0.0          return

