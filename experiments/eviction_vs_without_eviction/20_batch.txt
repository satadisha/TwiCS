In Phase 2 31363
In Phase 2 43371
In Phase 2 43643
In Phase 2 48400
In Phase 2 56430
In Phase 2 63752
In Phase 2 67713
In Phase 2 71397
In Phase 2 73525
In Phase 2 79234
In Phase 2 77277
In Phase 2 73455
In Phase 2 81624
In Phase 2 93870
In Phase 2 106974
In Phase 2 118330
In Phase 2 128216
In Phase 2 136468
In Phase 2 135888
In Phase 2 138031
Wrote profile results to phase2_Trie.py.lprof
Timer unit: 1e-06 s

Total time: 5.96317 s
File: phase2_Trie.py
Function: rreplace at line 44

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    44                                               #@profile
    45                                               def rreplace(self,s, old, new, occurrence):
    46   6673677      3720202      0.6     62.4          if s.endswith(old):
    47    143814       116617      0.8      2.0              li = s.rsplit(old, occurrence)
    48    143814        69848      0.5      1.2              return new.join(li)
    49                                                   else:
    50   6529863      2056507      0.3     34.5              return s

Total time: 767.179 s
File: phase2_Trie.py
Function: get_incomplete_tweets_frame at line 54

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    54                                               #@profile
    55                                               def get_incomplete_tweets_frame(self,data_frame_holder,candidate_featureBase_DF):
    56                                                   #print(candidate_featureBase_DF.head())
    57                                           
    58        20        48656   2432.8      0.0          good_candidates=candidate_featureBase_DF[candidate_featureBase_DF.status=="g"].candidate.tolist()
    59        20        43313   2165.7      0.0          bad_candidates=candidate_featureBase_DF[candidate_featureBase_DF.status=="b"].candidate.tolist()
    60                                           
    61        20         1731     86.5      0.0          mixed_candidates= good_candidates + bad_candidates
    62                                           
    63                                                   #incomplete_tweets=self.data_frame_holder[set(self.data_frame_holder[0]).issubset(['a', 'b', 'c'] )]
    64                                           
    65        20    766915208 38345760.4    100.0          data_frame_holder['completeness'] = data_frame_holder['2nd Iteration Candidates'].apply(lambda x: set(x).issubset(mixed_candidates))
    66                                           
    67        20       170359   8518.0      0.0          return data_frame_holder[data_frame_holder.completeness==False]

Total time: 11.3151 s
File: phase2_Trie.py
Function: set_readable_labels at line 70

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    70                                               #@profile
    71                                               def set_readable_labels(self,candidate_featureBase_DF):
    72                                           
    73                                                   #candidate_featureBase_DF['status'] = candidate_featureBase_DF['probability'].apply(lambda x: set(x).issubset(good_candidates))
    74        20        17033    851.6      0.2          candidate_featureBase_DF['status']='ne'
    75        20      3786084 189304.2     33.5          candidate_featureBase_DF['status'][candidate_featureBase_DF['probability']>=0.75]='g'
    76        20      3773800 188690.0     33.4          candidate_featureBase_DF['status'][(candidate_featureBase_DF['probability'] > 0.4) & (candidate_featureBase_DF['probability'] < 0.75)] = 'a'
    77        20      3738153 186907.6     33.0          candidate_featureBase_DF['status'][candidate_featureBase_DF['probability']<=0.4]='b'
    78                                           
    79        20           33      1.6      0.0          return candidate_featureBase_DF

Total time: 175.41 s
File: phase2_Trie.py
Function: normalize at line 82

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    82                                               #@profile
    83                                               def normalize(self,word):
    84  48500333     20058647      0.4     11.4          strip_op=word
    85  48500333     55295512      1.1     31.5          strip_op=(((strip_op.lstrip(string.punctuation)).rstrip(string.punctuation)).strip()).lower()
    86  48500333     31706495      0.7     18.1          strip_op=(strip_op.lstrip('“‘’”')).rstrip('“‘’”')
    87                                                   #strip_op= self.rreplace(self.rreplace(self.rreplace(strip_op,"'s","",1),"’s","",1),"’s","",1)
    88  48500333     25964413      0.5     14.8          if strip_op.endswith("'s"):
    89    709122       678088      1.0      0.4              li = strip_op.rsplit("'s", 1)
    90    709122       408485      0.6      0.2              return ''.join(li)
    91  47791211     24244246      0.5     13.8          elif strip_op.endswith("’s"):
    92     21584        22578      1.0      0.0              li = strip_op.rsplit("’s", 1)
    93     21584        13105      0.6      0.0              return ''.join(li)
    94                                                   else:
    95  47769627     17018899      0.4      9.7              return strip_op

Total time: 0 s
File: phase2_Trie.py
Function: isSubstring at line 98

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    98                                               #@profile      
    99                                               def isSubstring(self,to_increase_element,id_to_incr,comparison_holder,phase1_holder_holder_copy):
   100                                                   combined_list=comparison_holder[id_to_incr]+phase1_holder_holder_copy[id_to_incr]
   101                                           
   102                                                   for idx,val in enumerate(comparison_holder[id_to_incr]):
   103                                                       if((to_increase_element[0] in val[0]) and to_increase_element[0] != val[0]):
   104                                                           if((to_increase_element[5] in val[5]) and to_increase_element[5] != val[5]):
   105                                                               return True
   106                                                   for idx,val in enumerate(phase1_holder_holder_copy[id_to_incr]):
   107                                                       if((to_increase_element[0] in val[0]) and to_increase_element[0] != val[0]):
   108                                                           if((to_increase_element[5] in val[2]) and to_increase_element[5] != val[2]):
   109                                                               return True   
   110                                                           
   111                                                   return False

Total time: 0 s
File: phase2_Trie.py
Function: calculate_pmi at line 113

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   113                                               #@profile
   114                                               def calculate_pmi(self,big,x1,x2,total):
   115                                                   big__= float(big/total)
   116                                                   x1__=float(x1/total)
   117                                                   x2__=float(x2/total)
   118                                                   pmi= math.log(big__/(x1__*x2__),2.71828182845)
   119                                                   pklv=big__*pmi
   120                                                   #return (1/(1+math.exp(-1*pmi)))
   121                                                   npmi= pmi/(-1.0*(math.log(big__,2.71828182845)))
   122                                                   return npmi,pklv

Total time: 0 s
File: phase2_Trie.py
Function: transfer at line 127

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   127                                               #@profile
   128                                               def transfer(self,to_keep,to_split,classifier_results):
   129                                                   #transfering from to_keep to to_split
   130                                                   #print(classifier_results)
   131                                                   
   132                                                   b_star_list=[]
   133                                                   normal_b_list=[]
   134                                           
   135                                                   classifier_results=classifier_results.reset_index()
   136                                           
   137                                                   g_star_list=[]
   138                                                   normal_g_list=[]
   139                                           
   140                                                   #to_split operations
   141                                                   normal_b_list=classifier_results[(classifier_results.pred_prob2< 0.4)& (classifier_results.candidate.isin(to_split))]
   142                                                   normal_a_list_split=classifier_results[(classifier_results.pred_prob2>= 0.4)& (classifier_results.pred_prob2<0.8) & (classifier_results.candidate.isin(to_split))]
   143                                           
   144                                                   normal_b_list= normal_b_list.candidate.tolist()
   145                                                   normal_a_list_split= normal_a_list_split.candidate.tolist()
   146                                           
   147                                                   merger=[]
   148                                                   merger.extend(normal_a_list_split)
   149                                                   merger.extend(normal_b_list)
   150                                                   b_star_list = [x for x in to_split if x not in merger ]
   151                                           
   152                                                   #to_keep operations
   153                                                   normal_g_list=classifier_results[(classifier_results.pred_prob2> 0.8)& (classifier_results.candidate.isin(to_keep))]
   154                                                   normal_a_list_keep=classifier_results[(classifier_results.pred_prob2>= 0.4)& (classifier_results.pred_prob2<0.8) & (classifier_results.candidate.isin(to_keep))]
   155                                           
   156                                                   normal_a_list_keep= normal_a_list_keep.candidate.tolist()
   157                                                   normal_g_list=normal_g_list.candidate.tolist()
   158                                           
   159                                           
   160                                                   merger2=[]
   161                                                   merger2.extend(normal_a_list_keep)
   162                                                   merger2.extend(normal_g_list)
   163                                           
   164                                                   g_star_list= [x for x in to_keep if x not in merger2 ]
   165                                           
   166                                           
   167                                                   append_to_split_list=classifier_results[(classifier_results.pred_prob2< 0.4)& (classifier_results.candidate.isin(to_keep))]
   168                                           
   169                                                   #stay_same_keep=classifier_results[~((classifier_results.pred_prob2< 0.4)& (classifier_results.candidate.isin(to_keep)))]
   170                                                   append_to_split_list=append_to_split_list.candidate.tolist()
   171                                                   to_keep=[candidate for candidate in to_keep if candidate not in append_to_split_list]
   172                                                   to_split.extend(append_to_split_list)
   173                                                   #print(len(to_split),len(to_keep))
   174                                           
   175                                                   #transfering from to_split to to_keep
   176                                                   append_to_keep_list=classifier_results[(classifier_results.pred_prob2> 0.8)& (classifier_results.candidate.isin(to_split))]
   177                                                   #appending into to keep list
   178                                           
   179                                                   append_to_keep_list=append_to_keep_list.candidate.tolist()
   180                                                   #print(append_to_keep_list)
   181                                           
   182                                                   to_split=[candidate for candidate in to_split if candidate not in append_to_keep_list]
   183                                                   to_keep.extend(append_to_keep_list)
   184                                                   #print(len(to_split),len(to_keep))
   185                                           
   186                                                   #removing from to_split list
   187                                           
   188                                                   #print(len(to_split),len(to_keep))
   189                                                   #
   190                                                   merge_split_keep=[]
   191                                                   merge_split_keep.extend(to_keep)
   192                                                   merge_split_keep.extend(to_split)
   193                                           
   194                                                   to_b=classifier_results[(classifier_results.pred_prob2<= 0.4)& (~(classifier_results.candidate.isin(merge_split_keep)))]
   195                                                   to_g=classifier_results[(classifier_results.pred_prob2>= 0.8)& (~(classifier_results.candidate.isin(merge_split_keep)))]
   196                                                   to_a=classifier_results[(classifier_results.pred_prob2> 0.4)& (classifier_results.pred_prob2<0.8)& (~(classifier_results.candidate.isin(merge_split_keep)))]
   197                                           
   198                                                   return normal_a_list_split,normal_a_list_keep,b_star_list,normal_b_list,g_star_list,normal_g_list,to_b,to_g,to_a

Total time: 0 s
File: phase2_Trie.py
Function: verify at line 200

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   200                                               #@profile
   201                                               def verify(self, subsequence, CTrie):
   202                                                   return CTrie.__contains__(subsequence)

Total time: 0 s
File: phase2_Trie.py
Function: check_sequence at line 205

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   205                                               #@profile
   206                                               def check_sequence(self, sequence, l, CTrie):
   207                                                   result=[]
   208                                                   subsequence_length=l
   209                                                   while(subsequence_length>0):
   210                                                       shift=len(sequence)-subsequence_length
   211                                                       verified_subsequence=[]
   212                                                       verified=False
   213                                                       for i in range(0,shift+1):
   214                                                           list1=sequence[i:(i+subsequence_length)]
   215                                                           text=' '.join(str(e[0]) for e in list1)
   216                                                           subsequence=(self.normalize(text)).split()
   217                                                           #print("search for", subsequence)
   218                                                           if self.verify(subsequence, CTrie):
   219                                                               verified_subsequence.append(i)
   220                                                               verified_subsequence.append(i+subsequence_length)
   221                                                               #print(subsequence)
   222                                                               #print(subsequence,[(verified_subsequence[0]-0),(int(sequence[-1][1])-verified_subsequence[1])])
   223                                                               verified=True
   224                                                               break
   225                                                       if(verified):
   226                                                           result.append(sequence[verified_subsequence[0]:verified_subsequence[1]])
   227                                                           if(verified_subsequence[0]-0)>0:
   228                                                               subequence_to_check=sequence[0:verified_subsequence[0]]
   229                                                               #since tokens before the starting position of the verified subsequence have already been checked for subsequences of this length
   230                                                               partition_length=min(len(subequence_to_check),(subsequence_length-1))
   231                                                               #print(subequence_to_check)
   232                                                               lst=self.check_sequence(subequence_to_check,partition_length, CTrie)
   233                                                               if(lst):
   234                                                                   result.extend(lst)
   235                                                           if(int(sequence[-1][1])-verified_subsequence[1])>0:
   236                                                               subequence_to_check=sequence[(verified_subsequence[1]):]
   237                                                               #since tokens following the end position of the verified subsequence have not been checked for subsequences of this length
   238                                                               partition_length=min(len(subequence_to_check),(subsequence_length))
   239                                                               #print(subequence_to_check)
   240                                                               lst=self.check_sequence(subequence_to_check,partition_length, CTrie)
   241                                                               if(lst):
   242                                                                   result.extend(lst)
   243                                                           return result
   244                                                       else:
   245                                                           subsequence_length-=1
   246                                                   return result

Total time: 3454.34 s
File: phase2_Trie.py
Function: get_Candidates at line 249

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   249                                               #@profile
   250                                               def get_Candidates(self, sequence, CTrie):
   251                                                   #print(sequence)
   252   4650175   2855470764    614.1     82.7          candidateList=[]
   253   4650175      4265129      0.9      0.1          left=0
   254   4650175      4120089      0.9      0.1          start_node=CTrie
   255   4650175      3982428      0.9      0.1          last_cand="NAN"
   256   4650175      3973029      0.9      0.1          last_cand_substr=""
   257   4650175      4043883      0.9      0.1          reset=False
   258  16854410     19221032      1.1      0.6          for right in range(len(sequence)):
   259  12204235     10498577      0.9      0.3              if(reset):
   260   1303957      1104739      0.8      0.0                  left=right
   261  12204235     12079176      1.0      0.3              curr_text=sequence[right][0]
   262  12204235     12971068      1.1      0.4              curr_pos=[sequence[right][1]]
   263  12204235    112832374      9.2      3.3              curr=self.normalize(sequence[right][0])
   264                                           
   265  12204235    108347620      8.9      3.1              cand_str=self.normalize(last_cand_substr+" "+curr)
   266  12204235     15213059      1.2      0.4              last_cand_sequence=sequence[left:(right+1)]
   267  12204235     36451128      3.0      1.1              last_cand_text=' '.join(str(e[0]) for e in last_cand_sequence)
   268  12204235    124124704     10.2      3.6              last_cand_text_norm=self.normalize(' '.join(str(e[0]) for e in last_cand_sequence))
   269                                                       #print("==>",cand_str,last_cand_text)
   270  12204235     20303407      1.7      0.6              if ((curr in start_node.path.keys())&(cand_str==last_cand_text_norm)):
   271                                                           #print("=>",cand_str,last_cand_text)
   272   7205123      6451578      0.9      0.2                  reset=False
   273   7205123      9266559      1.3      0.3                  if (start_node.path[curr].value_valid):
   274                                                               #print(last_cand_text)
   275   5444104     10052244      1.8      0.3                      last_cand_pos=[e[1] for e in last_cand_sequence]
   276   5444104      4769015      0.9      0.1                      last_cand=last_cand_text
   277   7205123      6970216      1.0      0.2                  start_node=start_node.path[curr]
   278   7205123      6278381      0.9      0.2                  last_cand_substr=cand_str
   279                                                       else:
   280                                                           #print("=>",cand_str,last_cand_text)
   281   4999112      4682246      0.9      0.1                  if(last_cand!="NAN"):
   282   2630969      2987724      1.1      0.1                      candidateList.append((last_cand,last_cand_pos))
   283   4999112      4452938      0.9      0.1                  last_cand="NAN"
   284   4999112      4926929      1.0      0.1                  if(start_node!=CTrie):
   285   3788707      3330964      0.9      0.1                      start_node=CTrie
   286   3788707      3412197      0.9      0.1                      last_cand_substr=""
   287   3788707      4797300      1.3      0.1                      if curr in start_node.path.keys():
   288                                                                   #print("here",curr)
   289   2692143      2362539      0.9      0.1                          reset=False
   290   2692143      3462944      1.3      0.1                          if start_node.path[curr].value_valid:
   291   2136540      1918420      0.9      0.1                              last_cand_text=curr_text
   292   2136540      1866827      0.9      0.1                              last_cand_pos=curr_pos
   293   2136540      1845380      0.9      0.1                              last_cand=curr
   294   2692143      2337660      0.9      0.1                          left=right
   295   2692143      2630071      1.0      0.1                          start_node=start_node.path[curr]
   296   2692143      2481579      0.9      0.1                          last_cand_substr=curr
   297                                                               else:
   298   1096564       941311      0.9      0.0                          reset=True
   299                                                           else:
   300   1210405      1050539      0.9      0.0                      reset=True
   301                                                   #print(last_cand)
   302   4650175      4384495      0.9      0.1          if(last_cand!="NAN"):
   303   3312845      3831183      1.2      0.1              candidateList.append((last_cand,last_cand_pos))
   304   4650175      3842991      0.8      0.1          return candidateList

Total time: 0 s
File: phase2_Trie.py
Function: append_rows at line 307

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   307                                               #@profile
   308                                               def append_rows(self,df_holder):
   309                                               
   310                                                   df = pd.DataFrame(df_holder)
   311                                                   #self.data_frame_holder=self.data_frame_holder.append(df,ignore_index=True)
   312                                                   #self.data_frame_holder=self.data_frame_holder.reset_index(drop=True)
   313                                                   #print(len(self.data_frame_holder))
   314                                                   return df

Total time: 0 s
File: phase2_Trie.py
Function: join_token_tuples at line 318

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   318                                               #@profile
   319                                               def join_token_tuples(self,list_of_tuples):
   320                                                   #print(string.punctuation)
   321                                                   combined_str=(' '.join(tuple[0] for tuple in list_of_tuples)).lstrip(string.punctuation).rstrip(string.punctuation).strip()
   322                                                   combined_pos='*'.join(str(tuple[1]) for tuple in list_of_tuples)
   323                                                   combined_tuple=(combined_str,combined_pos,list_of_tuples[0][2],list_of_tuples[0][3],list_of_tuples[0][4],list_of_tuples[0][5],list_of_tuples[0][6])
   324                                                   return combined_tuple

Total time: 46.3184 s
File: phase2_Trie.py
Function: all_capitalized at line 328

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   328                                               #@profile
   329                                               def all_capitalized(self,candidate):
   330   2224559      1269602      0.6      2.7          strip_op=candidate
   331   2224559      2486030      1.1      5.4          strip_op=(((strip_op.lstrip(string.punctuation)).rstrip(string.punctuation)).strip())
   332   2224559      1737512      0.8      3.8          strip_op=(strip_op.lstrip('“‘’”')).rstrip('“‘’”')
   333   2224559     25102867     11.3     54.2          strip_op= self.rreplace(self.rreplace(self.rreplace(strip_op,"'s","",1),"’s","",1),"’s","",1)
   334   2224559      1951035      0.9      4.2          prep_article_list=prep_list+article_list
   335   2224559      1786765      0.8      3.9          word_list=strip_op.split()
   336   5708978      4358598      0.8      9.4          for i in range(len(word_list)):
   337   3729896      2027479      0.5      4.4              word=word_list[i]
   338   3729896      2594019      0.7      5.6              if(word[0].isupper()):
   339   3412578      1593749      0.5      3.4                  continue
   340                                                       else:
   341    317318       265903      0.8      0.6                  if(word in prep_article_list):
   342     71841        40863      0.6      0.1                      if (i!=0):
   343     29353        12994      0.4      0.0                          continue
   344                                                               else:
   345     42488        21851      0.5      0.0                          False
   346                                                           else:
   347    245477       146411      0.6      0.3                      return False
   348   1979082       922739      0.5      2.0          return True

Total time: 94.3092 s
File: phase2_Trie.py
Function: check_feature_update at line 352

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   352                                               #@profile
   353                                               def check_feature_update(self, candidate_tuple,non_discriminative_flag):
   354                                                   #print(candidate_tuple)
   355   5943814      2841897      0.5      3.0          if(non_discriminative_flag):
   356    392490       173313      0.4      0.2              return 7
   357   5551324      2647742      0.5      2.8          candidateText=candidate_tuple[0]
   358   5551324      2489920      0.4      2.6          position=candidate_tuple[1]
   359   5551324      4569261      0.8      4.8          word_list=candidateText.split()
   360   5551324      3463942      0.6      3.7          if candidateText.islower():
   361   3236998      1257049      0.4      1.3              return 6
   362   2314326      1288835      0.6      1.4          elif candidateText.isupper():
   363     89767        35514      0.4      0.0              return 5
   364   2224559      1494491      0.7      1.6          elif (len(word_list)==1):
   365                                                       #start-of-sentence-check
   366   1100919     32422878     29.5     34.4              if self.all_capitalized(candidateText):
   367   1098600      1192128      1.1      1.3                  if(int(position[0])==0):
   368    515792       209053      0.4      0.2                      return 4
   369                                                           else:
   370    582808       232769      0.4      0.2                      return 2
   371                                                       else:
   372      2319          967      0.4      0.0                  return 3
   373                                                   else:
   374   1123640     39542326     35.2     41.9              if(self.all_capitalized(candidateText)):
   375    880482       347312      0.4      0.4                  return 2
   376                                                       else:
   377    243158        99836      0.4      0.1                  return 3

Total time: 206.563 s
File: phase2_Trie.py
Function: update_Candidatedict at line 379

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   379                                               #@profile
   380                                               def update_Candidatedict(self,candidate_tuple,non_discriminative_flag):
   381   5943814      3137863      0.5      1.5          candidateText=candidate_tuple[0]
   382                                                   #print(candidate_tuple)
   383   5943814     49841249      8.4     24.1          normalized_candidate=self.normalize(candidateText)
   384   5943814      2491813      0.4      1.2          feature_list=[]
   385   5943814      5604733      0.9      2.7          if(normalized_candidate in self.CandidateBase_dict.keys()):
   386   5926719      3710054      0.6      1.8              feature_list=self.CandidateBase_dict[normalized_candidate]
   387                                                   else:
   388     17095        17520      1.0      0.0              feature_list=[0]*9
   389     17095        10932      0.6      0.0              feature_list[0]=self.counter
   390     17095        21892      1.3      0.0              feature_list[1]=len(normalized_candidate.split())
   391   5943814    129933951     21.9     62.9          feature_to_update=self.check_feature_update(candidate_tuple,non_discriminative_flag)
   392                                                   #print(candidateText,feature_to_update)
   393   5943814      4841430      0.8      2.3          feature_list[feature_to_update]+=1
   394   5943814      3578709      0.6      1.7          feature_list[8]+=1
   395   5943814      3373322      0.6      1.6          self.CandidateBase_dict[normalized_candidate]=feature_list

Total time: 5868.28 s
File: phase2_Trie.py
Function: extract at line 400

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   400                                               #@profile
   401                                               def extract(self,TweetBase,CTrie,z_score_threshold):
   402                                           
   403                                           
   404        20          126      6.3      0.0          if(self.counter==0):
   405                                                       #output_queue
   406         1         1773   1773.0      0.0              self.data_frame_holder_OQ=pd.DataFrame([], columns=['index','tweetID', 'sentID', 'hashtags', 'user', 'TweetSentence','phase1Candidates', '2nd Iteration Candidates'])
   407         1         1448   1448.0      0.0              self.incomplete_tweets=pd.DataFrame([], columns=['index','tweetID', 'sentID', 'hashtags', 'user', 'TweetSentence','phase1Candidates', '2nd Iteration Candidates'])
   408         1            5      5.0      0.0              self.CandidateBase_dict= {}
   409         1            3      3.0      0.0              self.good_candidates=[]
   410         1            2      2.0      0.0              self.bad_candidates=[]
   411                                           
   412                                           
   413        20        45741   2287.1      0.0          data_frame_holder=pd.DataFrame([], columns=['index','tweetID', 'sentID', 'hashtags', 'user', 'TweetSentence','phase1Candidates', '2nd Iteration Candidates'])
   414        20           61      3.0      0.0          phase1_holder_holder=[]
   415        20           52      2.6      0.0          df_holder=[]
   416        20           45      2.2      0.0          candidateBase_holder=[]
   417                                           
   418                                                   #this has to be changed to an append function since IPQ already has incomplete tweets from prev batch  
   419        20       701260  35063.0      0.0          immediate_processingQueue = pd.concat([TweetBase, self.incomplete_tweets])
   420                                           
   421                                           
   422        20          375     18.8      0.0          print('In Phase 2',len(immediate_processingQueue))
   423                                                   #immediate_processingQueue=immediate_processingQueue.reset_index(drop=True)
   424        20          727     36.4      0.0          combined_list_here=([]+list(cachedStopWords)+chat_word_list+day_list+month_list+article_list+prep_list)
   425        20         9763    488.1      0.0          combined_list_filtered=list(filter(lambda word: word not in (prep_list+article_list+month_list), combined_list_here))
   426                                                   #--------------------------------------PHASE II---------------------------------------------------
   427   1668981    264133588    158.3      4.5          for index, row in immediate_processingQueue.iterrows():
   428                                           
   429                                                       #phase 1 candidates for one sentence
   430   1668961      4878336      2.9      0.1              phase1_holder=[]
   431                                           
   432   1668961     55176721     33.1      0.9              tweetText=str(row['TweetSentence'])
   433                                                       #print(tweetText)
   434   1668961     39938932     23.9      0.7              sentID=str(row['sentID'])
   435   1668961     36437647     21.8      0.6              tweetID=str(row['tweetID'])
   436   1668961     35302083     21.2      0.6              phase1Candidates=str(row['phase1Candidates'])
   437   1668961     34941149     20.9      0.6              hashtags=str(row['hashtags'])
   438   1668961     34815476     20.9      0.6              user=str(row['user'])
   439   1668961     35614392     21.3      0.6              batch=str(row['entry_batch'])
   440   1668961     40038834     24.0      0.7              time=str(row['start_time'])
   441   1668961      4232758      2.5      0.1              non_discriminative_flag=False
   442                                           
   443                                           
   444   1668961      4214551      2.5      0.1              if(phase1Candidates!="nan"):
   445   1482215      5045190      3.4      0.1                  phase1Raw=phase1Candidates.split("||")
   446   1482215      6161647      4.2      0.1                  phase1Raw = list(filter(None, phase1Raw))
   447                                           
   448                                           
   449   3371923      8793583      2.6      0.1                  for entities_with_loc in phase1Raw:
   450   1889708      5542131      2.9      0.1                      entity_to_store=entities_with_loc.split("::")[0]
   451                                                               #print(entity_to_store)
   452   1889708      5155292      2.7      0.1                      position=entities_with_loc.split("::")[1]
   453                                                               #print(position)
   454   1889708      5031327      2.7      0.1                      phase1_holder.append((entity_to_store,position))
   455                                           
   456   1482215     49145121     33.2      0.8                  phase1_holder_holder.append(copy.deepcopy(phase1_holder))
   457   1482215      4074032      2.7      0.1                  phase1_holder.clear()
   458                                           
   459                                                       else:
   460    186746       449143      2.4      0.0                  non_discriminative_flag=True
   461    186746       527418      2.8      0.0                  phase1_holder_holder.append([])
   462                                           
   463                                           
   464                                                       #print(sen_index1)[ ()/,;:!?…-]
   465                                                       #splitList=tweetText.split()
   466   1668961     20892978     12.5      0.4              splitList=re.split('[ ()/,;:!?…-]',tweetText)
   467                                                       #print(tweetText,splitList)
   468                                                       #wordlstU=list(filter(lambda word: ((word!="")&(word.strip(string.punctuation).strip().lower() not in cachedStopWords)), splitList))
   469   1668961     13194228      7.9      0.2              splitList=list(map(lambda word: word.strip(), splitList))
   470   1668961     11498311      6.9      0.2              tweetWordList=list(filter(lambda word: word!="", splitList))
   471                                                       #print(tweetWordList)
   472   1668961     10898560      6.5      0.2              tweetWordList= [(token,idx) for idx,token in enumerate(tweetWordList)]
   473                                                       
   474                                           
   475                                           
   476                                                       #combined_list_here=([]+list(cachedStopWords)+prep_list+chat_word_list+article_list+day_list+month_list)
   477                                                       
   478   1668961    104027461     62.3      1.8              tweetWordList_stopWords=list(filter (lambda word: ((((word[0].strip()).strip(string.punctuation)).lower() in combined_list_filtered)|(word[0].strip() in string.punctuation)|(word[0].startswith('@'))), tweetWordList))
   479                                           
   480                                           
   481                                                       # phase 2 candidate tuples without stopwords for a sentence
   482   1668961     17139117     10.3      0.3              c=[(y[0],str(y[1]),tweetID,sentID,'ne',batch,time) for y  in tweetWordList if y not in tweetWordList_stopWords ]
   483                                                       #c=[(y[0],str(y[1])) for y  in tweetWordList if y not in tweetWordList_stopWords ]
   484                                           
   485                                                       #print(c)
   486   1668961      4928817      3.0      0.1              sequences=[]
   487   6319136     21558589      3.4      0.4              for k, g in groupby(enumerate(c), lambda element: element[0]-int(element[1][1])):
   488   4650175     24862632      5.3      0.4                  sequences.append(list(map(itemgetter(1), g)))
   489                                           
   490   1668961      4807338      2.9      0.1              ne_candidate_list=[]
   491   6319136     16397016      2.6      0.3              for sequence in sequences:
   492                                                           '''print(sequence)
   493                                                           seq_candidates=self.check_sequence(sequence, len(sequence), CTrie)'''
   494                                           
   495   4650175   3769940554    810.7     64.2                  seq_candidate_list=self.get_Candidates(sequence, CTrie)
   496   4650175     11616534      2.5      0.2                  if(seq_candidate_list):
   497                                                               '''seq_candidate_list= list(map(lambda e: self.join_token_tuples(e) ,seq_candidates))
   498                                                               print("====",seq_candidate_list)'''
   499                                           
   500                                                               
   501   9866270     25528182      2.6      0.4                      for candidate_tuple in seq_candidate_list:
   502                                                                   #inserts into CandidateBase and updates the correct frequency feature based on Capitalization pattern
   503   5943814    258782478     43.5      4.4                          self.update_Candidatedict(candidate_tuple,non_discriminative_flag)
   504   3922456     10690961      2.7      0.2                      ne_candidate_list.extend(seq_candidate_list)
   505                                                       
   506                                                       
   507                                                       #phase2_candidates='||'.join(e[0] for e in ne_candidate_list)
   508                                           
   509   1668961     52177737     31.3      0.9              phase2_candidates=[self.normalize(e[0]) for e in ne_candidate_list]
   510                                           
   511                                                       #print(phase1Candidates,"====",phase2_candidates)
   512   1668961      6271544      3.8      0.1              dict1 = {'tweetID':tweetID, 'sentID':sentID, 'hashtags':hashtags, 'user':user, 'TweetSentence':tweetText, 'phase1Candidates':phase1Candidates,'2nd Iteration Candidates':phase2_candidates}
   513                                           
   514   1668961      4343280      2.6      0.1              df_holder.append(dict1)
   515                                                       #-------------------------------------------------------------------END of 1st iteration: RESCAN+CANDIDATE_UPDATION-----------------------------------------------------------
   516                                           
   517                                                   #df_holder is the immediate processing queue of the current batch converted into a dataframe---> data_frame_holder
   518                                                   #self.append_rows(df_holder)
   519        20      3631113 181555.6      0.1          data_frame_holder = pd.DataFrame(df_holder)
   520                                           
   521                                                   #convert the CandidateFeatureBase from a dictionary to dataframe---> CandidateFeatureBaseDF
   522        20          129      6.5      0.0          candidateBaseHeaders=['candidate', 'batch', 'length','cap','substring-cap','s-o-sCap','all-cap','non-cap','non-discriminative','cumulative']
   523        20       326841  16342.0      0.0          candidate_featureBase_DF=pd.DataFrame.from_dict(self.CandidateBase_dict, orient='index')
   524        20         3317    165.8      0.0          candidate_featureBase_DF.columns=candidateBaseHeaders[1:]
   525        20           88      4.4      0.0          candidate_featureBase_DF.index.name=candidateBaseHeaders[0]
   526        20        24194   1209.7      0.0          candidate_featureBase_DF = candidate_featureBase_DF.reset_index(drop=False)

