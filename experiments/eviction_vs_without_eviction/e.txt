In Phase 2 31363
In Phase 2 43401
In Phase 2 43776
In Phase 2 48205
In Phase 2 57319
Wrote profile results to phase2_Trie.py.lprof
Timer unit: 1e-06 s

Total time: 15.6525 s
File: phase2_Trie.py
Function: rreplace at line 44

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    44                                               @profile
    45                                               def rreplace(self,s, old, new, occurrence):
    46  18240288      9866571      0.5     63.0          if s.endswith(old):
    47     97058       114089      1.2      0.7              li = s.rsplit(old, occurrence)
    48     97058        52640      0.5      0.3              return new.join(li)
    49                                                   else:
    50  18143230      5619235      0.3     35.9              return s

Total time: 29.1411 s
File: phase2_Trie.py
Function: get_incomplete_tweets_frame at line 54

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    54                                               @profile
    55                                               def get_incomplete_tweets_frame(self,data_frame_holder,candidate_featureBase_DF):
    56                                                   #print(candidate_featureBase_DF.head())
    57                                           
    58         5        14329   2865.8      0.0          good_candidates=candidate_featureBase_DF[candidate_featureBase_DF.status=="g"].candidate.tolist()
    59         5        11147   2229.4      0.0          bad_candidates=candidate_featureBase_DF[candidate_featureBase_DF.status=="b"].candidate.tolist()
    60                                           
    61         5          289     57.8      0.0          mixed_candidates= good_candidates + bad_candidates
    62                                           
    63                                                   #incomplete_tweets=self.data_frame_holder[set(self.data_frame_holder[0]).issubset(['a', 'b', 'c'] )]
    64                                           
    65         5     29091885 5818377.0     99.8          data_frame_holder['completeness'] = data_frame_holder['2nd Iteration Candidates'].apply(lambda x: set(x).issubset(mixed_candidates))
    66                                           
    67         5        23438   4687.6      0.1          return data_frame_holder[data_frame_holder.completeness==False]

Total time: 2.08503 s
File: phase2_Trie.py
Function: set_readable_labels at line 70

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    70                                               @profile
    71                                               def set_readable_labels(self,candidate_featureBase_DF):
    72                                           
    73                                                   #candidate_featureBase_DF['status'] = candidate_featureBase_DF['probability'].apply(lambda x: set(x).issubset(good_candidates))
    74         5         3801    760.2      0.2          candidate_featureBase_DF['status']='ne'
    75         5       698901 139780.2     33.5          candidate_featureBase_DF['status'][candidate_featureBase_DF['probability']>=0.75]='g'
    76         5       685142 137028.4     32.9          candidate_featureBase_DF['status'][(candidate_featureBase_DF['probability'] > 0.4) & (candidate_featureBase_DF['probability'] < 0.75)] = 'a'
    77         5       697177 139435.4     33.4          candidate_featureBase_DF['status'][candidate_featureBase_DF['probability']<=0.4]='b'
    78                                           
    79         5            9      1.8      0.0          return candidate_featureBase_DF

Total time: 77.8246 s
File: phase2_Trie.py
Function: normalize at line 82

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    82                                               @profile
    83                                               def normalize(self,word):
    84   5828075      2428944      0.4      3.1          strip_op=word
    85   5828075      7660835      1.3      9.8          strip_op=(((strip_op.lstrip(string.punctuation)).rstrip(string.punctuation)).strip()).lower()
    86   5828075      4004135      0.7      5.1          strip_op=(strip_op.lstrip('“‘’”')).rstrip('“‘’”')
    87   5828075     61578518     10.6     79.1          strip_op= self.rreplace(self.rreplace(self.rreplace(strip_op,"'s","",1),"’s","",1),"’s","",1)
    88   5828075      2152183      0.4      2.8          return strip_op

Total time: 0 s
File: phase2_Trie.py
Function: isSubstring at line 90

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    90                                               @profile      
    91                                               def isSubstring(self,to_increase_element,id_to_incr,comparison_holder,phase1_holder_holder_copy):
    92                                                   combined_list=comparison_holder[id_to_incr]+phase1_holder_holder_copy[id_to_incr]
    93                                           
    94                                                   for idx,val in enumerate(comparison_holder[id_to_incr]):
    95                                                       if((to_increase_element[0] in val[0]) and to_increase_element[0] != val[0]):
    96                                                           if((to_increase_element[5] in val[5]) and to_increase_element[5] != val[5]):
    97                                                               return True
    98                                                   for idx,val in enumerate(phase1_holder_holder_copy[id_to_incr]):
    99                                                       if((to_increase_element[0] in val[0]) and to_increase_element[0] != val[0]):
   100                                                           if((to_increase_element[5] in val[2]) and to_increase_element[5] != val[2]):
   101                                                               return True   
   102                                                           
   103                                                   return False

Total time: 0 s
File: phase2_Trie.py
Function: calculate_pmi at line 105

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   105                                               @profile
   106                                               def calculate_pmi(self,big,x1,x2,total):
   107                                                   big__= float(big/total)
   108                                                   x1__=float(x1/total)
   109                                                   x2__=float(x2/total)
   110                                                   pmi= math.log(big__/(x1__*x2__),2.71828182845)
   111                                                   pklv=big__*pmi
   112                                                   #return (1/(1+math.exp(-1*pmi)))
   113                                                   npmi= pmi/(-1.0*(math.log(big__,2.71828182845)))
   114                                                   return npmi,pklv

Total time: 0 s
File: phase2_Trie.py
Function: transfer at line 119

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   119                                               @profile
   120                                               def transfer(self,to_keep,to_split,classifier_results):
   121                                                   #transfering from to_keep to to_split
   122                                                   #print(classifier_results)
   123                                                   
   124                                                   b_star_list=[]
   125                                                   normal_b_list=[]
   126                                           
   127                                                   classifier_results=classifier_results.reset_index()
   128                                           
   129                                                   g_star_list=[]
   130                                                   normal_g_list=[]
   131                                           
   132                                                   #to_split operations
   133                                                   normal_b_list=classifier_results[(classifier_results.pred_prob2< 0.4)& (classifier_results.candidate.isin(to_split))]
   134                                                   normal_a_list_split=classifier_results[(classifier_results.pred_prob2>= 0.4)& (classifier_results.pred_prob2<0.8) & (classifier_results.candidate.isin(to_split))]
   135                                           
   136                                                   normal_b_list= normal_b_list.candidate.tolist()
   137                                                   normal_a_list_split= normal_a_list_split.candidate.tolist()
   138                                           
   139                                                   merger=[]
   140                                                   merger.extend(normal_a_list_split)
   141                                                   merger.extend(normal_b_list)
   142                                                   b_star_list = [x for x in to_split if x not in merger ]
   143                                           
   144                                                   #to_keep operations
   145                                                   normal_g_list=classifier_results[(classifier_results.pred_prob2> 0.8)& (classifier_results.candidate.isin(to_keep))]
   146                                                   normal_a_list_keep=classifier_results[(classifier_results.pred_prob2>= 0.4)& (classifier_results.pred_prob2<0.8) & (classifier_results.candidate.isin(to_keep))]
   147                                           
   148                                                   normal_a_list_keep= normal_a_list_keep.candidate.tolist()
   149                                                   normal_g_list=normal_g_list.candidate.tolist()
   150                                           
   151                                           
   152                                                   merger2=[]
   153                                                   merger2.extend(normal_a_list_keep)
   154                                                   merger2.extend(normal_g_list)
   155                                           
   156                                                   g_star_list= [x for x in to_keep if x not in merger2 ]
   157                                           
   158                                           
   159                                                   append_to_split_list=classifier_results[(classifier_results.pred_prob2< 0.4)& (classifier_results.candidate.isin(to_keep))]
   160                                           
   161                                                   #stay_same_keep=classifier_results[~((classifier_results.pred_prob2< 0.4)& (classifier_results.candidate.isin(to_keep)))]
   162                                                   append_to_split_list=append_to_split_list.candidate.tolist()
   163                                                   to_keep=[candidate for candidate in to_keep if candidate not in append_to_split_list]
   164                                                   to_split.extend(append_to_split_list)
   165                                                   #print(len(to_split),len(to_keep))
   166                                           
   167                                                   #transfering from to_split to to_keep
   168                                                   append_to_keep_list=classifier_results[(classifier_results.pred_prob2> 0.8)& (classifier_results.candidate.isin(to_split))]
   169                                                   #appending into to keep list
   170                                           
   171                                                   append_to_keep_list=append_to_keep_list.candidate.tolist()
   172                                                   #print(append_to_keep_list)
   173                                           
   174                                                   to_split=[candidate for candidate in to_split if candidate not in append_to_keep_list]
   175                                                   to_keep.extend(append_to_keep_list)
   176                                                   #print(len(to_split),len(to_keep))
   177                                           
   178                                                   #removing from to_split list
   179                                           
   180                                                   #print(len(to_split),len(to_keep))
   181                                                   #
   182                                                   merge_split_keep=[]
   183                                                   merge_split_keep.extend(to_keep)
   184                                                   merge_split_keep.extend(to_split)
   185                                           
   186                                                   to_b=classifier_results[(classifier_results.pred_prob2<= 0.4)& (~(classifier_results.candidate.isin(merge_split_keep)))]
   187                                                   to_g=classifier_results[(classifier_results.pred_prob2>= 0.8)& (~(classifier_results.candidate.isin(merge_split_keep)))]
   188                                                   to_a=classifier_results[(classifier_results.pred_prob2> 0.4)& (classifier_results.pred_prob2<0.8)& (~(classifier_results.candidate.isin(merge_split_keep)))]
   189                                           
   190                                                   return normal_a_list_split,normal_a_list_keep,b_star_list,normal_b_list,g_star_list,normal_g_list,to_b,to_g,to_a

Total time: 0 s
File: phase2_Trie.py
Function: verify at line 192

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   192                                               @profile
   193                                               def verify(self, subsequence, CTrie):
   194                                                   return CTrie.__contains__(subsequence)

Total time: 0 s
File: phase2_Trie.py
Function: check_sequence at line 197

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   197                                               @profile
   198                                               def check_sequence(self, sequence, l, CTrie):
   199                                                   result=[]
   200                                                   subsequence_length=l
   201                                                   while(subsequence_length>0):
   202                                                       shift=len(sequence)-subsequence_length
   203                                                       verified_subsequence=[]
   204                                                       verified=False
   205                                                       for i in range(0,shift+1):
   206                                                           list1=sequence[i:(i+subsequence_length)]
   207                                                           text=' '.join(str(e[0]) for e in list1)
   208                                                           subsequence=(self.normalize(text)).split()
   209                                                           #print("search for", subsequence)
   210                                                           if self.verify(subsequence, CTrie):
   211                                                               verified_subsequence.append(i)
   212                                                               verified_subsequence.append(i+subsequence_length)
   213                                                               #print(subsequence)
   214                                                               #print(subsequence,[(verified_subsequence[0]-0),(int(sequence[-1][1])-verified_subsequence[1])])
   215                                                               verified=True
   216                                                               break
   217                                                       if(verified):
   218                                                           result.append(sequence[verified_subsequence[0]:verified_subsequence[1]])
   219                                                           if(verified_subsequence[0]-0)>0:
   220                                                               subequence_to_check=sequence[0:verified_subsequence[0]]
   221                                                               #since tokens before the starting position of the verified subsequence have already been checked for subsequences of this length
   222                                                               partition_length=min(len(subequence_to_check),(subsequence_length-1))
   223                                                               #print(subequence_to_check)
   224                                                               lst=self.check_sequence(subequence_to_check,partition_length, CTrie)
   225                                                               if(lst):
   226                                                                   result.extend(lst)
   227                                                           if(int(sequence[-1][1])-verified_subsequence[1])>0:
   228                                                               subequence_to_check=sequence[(verified_subsequence[1]):]
   229                                                               #since tokens following the end position of the verified subsequence have not been checked for subsequences of this length
   230                                                               partition_length=min(len(subequence_to_check),(subsequence_length))
   231                                                               #print(subequence_to_check)
   232                                                               lst=self.check_sequence(subequence_to_check,partition_length, CTrie)
   233                                                               if(lst):
   234                                                                   result.extend(lst)
   235                                                           return result
   236                                                       else:
   237                                                           subsequence_length-=1
   238                                                   return result

Total time: 122.079 s
File: phase2_Trie.py
Function: get_Candidates at line 241

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   241                                               @profile
   242                                               def get_Candidates(self, sequence, CTrie):
   243                                                   #print(sequence)
   244    568094       632848      1.1      0.5          candidateList=[]
   245    568094       552544      1.0      0.5          left=0
   246    568094       529368      0.9      0.4          start_node=CTrie
   247    568094       515228      0.9      0.4          last_cand="NAN"
   248    568094       508614      0.9      0.4          last_cand_substr=""
   249    568094       510373      0.9      0.4          reset=False
   250   2097317      2700317      1.3      2.2          for right in range(len(sequence)):
   251   1529223      1411393      0.9      1.2              if(reset):
   252    221538       201943      0.9      0.2                  left=right
   253   1529223      1640929      1.1      1.3              curr_text=sequence[right][0]
   254   1529223      1748863      1.1      1.4              curr_pos=[sequence[right][1]]
   255   1529223     29287587     19.2     24.0              curr=self.normalize(sequence[right][0])
   256   1529223     27875517     18.2     22.8              cand_str=self.normalize(last_cand_substr+" "+curr)
   257   1529223      2153188      1.4      1.8              last_cand_sequence=sequence[left:(right+1)]
   258   1529223      5176544      3.4      4.2              last_cand_text=' '.join(str(e[0]) for e in last_cand_sequence)
   259   1529223     30244205     19.8     24.8              last_cand_text_norm=self.normalize(' '.join(str(e[0]) for e in last_cand_sequence))
   260                                                       #print("==>",cand_str,last_cand_text)
   261   1529223      3179063      2.1      2.6              if ((curr in start_node.path.keys())&(cand_str==last_cand_text_norm)):
   262                                                           #print("=>",cand_str,last_cand_text)
   263    896594       849286      0.9      0.7                  reset=False
   264    896594      1349172      1.5      1.1                  if (start_node.path[curr].value_valid):
   265                                                               #print(last_cand_text)
   266    675507      1419063      2.1      1.2                      last_cand_pos=[e[1] for e in last_cand_sequence]
   267    675507       628398      0.9      0.5                      last_cand=last_cand_text
   268    896594       914141      1.0      0.7                  start_node=start_node.path[curr]
   269    896594       833563      0.9      0.7                  last_cand_substr=cand_str
   270                                                       else:
   271                                                           #print("=>",cand_str,last_cand_text)
   272    632629       637527      1.0      0.5                  if(last_cand!="NAN"):
   273    270834       345219      1.3      0.3                      candidateList.append((last_cand,last_cand_pos))
   274    632629       596523      0.9      0.5                  last_cand="NAN"
   275    632629       671126      1.1      0.5                  if(start_node!=CTrie):
   276    392920       363907      0.9      0.3                      start_node=CTrie
   277    392920       374856      1.0      0.3                      last_cand_substr=""
   278    392920       569011      1.4      0.5                      if curr in start_node.path.keys():
   279                                                                   #print("here",curr)
   280    229654       213884      0.9      0.2                          reset=False
   281    229654       349647      1.5      0.3                          if start_node.path[curr].value_valid:
   282    182018       174180      1.0      0.1                              last_cand_text=curr_text
   283    182018       168492      0.9      0.1                              last_cand_pos=curr_pos
   284    182018       167496      0.9      0.1                              last_cand=curr
   285    229654       211197      0.9      0.2                          left=right
   286    229654       237608      1.0      0.2                          start_node=start_node.path[curr]
   287    229654       228092      1.0      0.2                          last_cand_substr=curr
   288                                                               else:
   289    163266       148814      0.9      0.1                          reset=True
   290                                                           else:
   291    239709       220436      0.9      0.2                      reset=True
   292                                                   #print(last_cand)
   293    568094       586044      1.0      0.5          if(last_cand!="NAN"):
   294    349369       450754      1.3      0.4              candidateList.append((last_cand,last_cand_pos))
   295    568094       502510      0.9      0.4          return candidateList

Total time: 0 s
File: phase2_Trie.py
Function: append_rows at line 298

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   298                                               @profile
   299                                               def append_rows(self,df_holder):
   300                                               
   301                                                   df = pd.DataFrame(df_holder)
   302                                                   #self.data_frame_holder=self.data_frame_holder.append(df,ignore_index=True)
   303                                                   #self.data_frame_holder=self.data_frame_holder.reset_index(drop=True)
   304                                                   #print(len(self.data_frame_holder))
   305                                                   return df

Total time: 0 s
File: phase2_Trie.py
Function: join_token_tuples at line 309

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   309                                               @profile
   310                                               def join_token_tuples(self,list_of_tuples):
   311                                                   #print(string.punctuation)
   312                                                   combined_str=(' '.join(tuple[0] for tuple in list_of_tuples)).lstrip(string.punctuation).rstrip(string.punctuation).strip()
   313                                                   combined_pos='*'.join(str(tuple[1]) for tuple in list_of_tuples)
   314                                                   combined_tuple=(combined_str,combined_pos,list_of_tuples[0][2],list_of_tuples[0][3],list_of_tuples[0][4],list_of_tuples[0][5],list_of_tuples[0][6])
   315                                                   return combined_tuple

Total time: 5.69181 s
File: phase2_Trie.py
Function: all_capitalized at line 319

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   319                                               @profile
   320                                               def all_capitalized(self,candidate):
   321    252021       150956      0.6      2.7          strip_op=candidate
   322    252021       318306      1.3      5.6          strip_op=(((strip_op.lstrip(string.punctuation)).rstrip(string.punctuation)).strip())
   323    252021       208577      0.8      3.7          strip_op=(strip_op.lstrip('“‘’”')).rstrip('“‘’”')
   324    252021      2782162     11.0     48.9          strip_op= self.rreplace(self.rreplace(self.rreplace(strip_op,"'s","",1),"’s","",1),"’s","",1)
   325    252021       343726      1.4      6.0          prep_article_list=prep_list+article_list
   326    252021       229985      0.9      4.0          word_list=strip_op.split()
   327    710157       605082      0.9     10.6          for i in range(len(word_list)):
   328    483695       271795      0.6      4.8              word=word_list[i]
   329    483695       404206      0.8      7.1              if(word[0].isupper()):
   330    455224       219161      0.5      3.9                  continue
   331                                                       else:
   332     28471        29143      1.0      0.5                  if(word in prep_article_list):
   333      2912         1960      0.7      0.0                      if (i!=0):
   334      2806         1334      0.5      0.0                          continue
   335                                                               else:
   336       106           51      0.5      0.0                          False
   337                                                           else:
   338     25559        16230      0.6      0.3                      return False
   339    226462       109135      0.5      1.9          return True

Total time: 11.8055 s
File: phase2_Trie.py
Function: check_feature_update at line 343

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   343                                               @profile
   344                                               def check_feature_update(self, candidate_tuple,non_discriminative_flag):
   345                                                   #print(candidate_tuple)
   346    620203       307116      0.5      2.6          if(non_discriminative_flag):
   347     30221        14338      0.5      0.1              return 7
   348    589982       309532      0.5      2.6          candidateText=candidate_tuple[0]
   349    589982       290023      0.5      2.5          position=candidate_tuple[1]
   350    589982       630636      1.1      5.3          word_list=candidateText.split()
   351    589982       471217      0.8      4.0          if candidateText.islower():
   352    322410       135213      0.4      1.1              return 6
   353    267572       196049      0.7      1.7          elif candidateText.isupper():
   354     15551         6650      0.4      0.1              return 5
   355    252021       187212      0.7      1.6          elif (len(word_list)==1):
   356                                                       #start-of-sentence-check
   357     84315      2672529     31.7     22.6              if self.all_capitalized(candidateText):
   358     84082       118167      1.4      1.0                  if(int(position[0])==0):
   359     37634        16300      0.4      0.1                      return 4
   360                                                           else:
   361     46448        20296      0.4      0.2                      return 2
   362                                                       else:
   363       233           93      0.4      0.0                  return 3
   364                                                   else:
   365    167706      6356989     37.9     53.8              if(self.all_capitalized(candidateText)):
   366    142380        61766      0.4      0.5                  return 2
   367                                                       else:
   368     25326        11397      0.5      0.1                  return 3

Total time: 30.6283 s
File: phase2_Trie.py
Function: update_Candidatedict at line 370

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   370                                               @profile
   371                                               def update_Candidatedict(self,candidate_tuple,non_discriminative_flag):
   372    620203       347009      0.6      1.1          candidateText=candidate_tuple[0]
   373                                                   #print(candidate_tuple)
   374    620203     11070968     17.9     36.1          normalized_candidate=self.normalize(candidateText)
   375    620203       284658      0.5      0.9          feature_list=[]
   376    620203       769769      1.2      2.5          if(normalized_candidate in self.CandidateBase_dict.keys()):
   377    615631       451343      0.7      1.5              feature_list=self.CandidateBase_dict[normalized_candidate]
   378                                                   else:
   379      4572         5791      1.3      0.0              feature_list=[0]*9
   380      4572         3657      0.8      0.0              feature_list[0]=self.counter
   381      4572         6931      1.5      0.0              feature_list[1]=len(normalized_candidate.split())
   382    620203     16184461     26.1     52.8          feature_to_update=self.check_feature_update(candidate_tuple,non_discriminative_flag)
   383                                                   #print(candidateText,feature_to_update)
   384    620203       677840      1.1      2.2          feature_list[feature_to_update]+=1
   385    620203       436266      0.7      1.4          feature_list[8]+=1
   386    620203       389569      0.6      1.3          self.CandidateBase_dict[normalized_candidate]=feature_list

Total time: 404.058 s
File: phase2_Trie.py
Function: extract at line 391

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   391                                               @profile
   392                                               def extract(self,TweetBase,CTrie,z_score_threshold):
   393                                           
   394                                           
   395         5           52     10.4      0.0          if(self.counter==0):
   396                                                       #output_queue
   397         1         2162   2162.0      0.0              self.data_frame_holder_OQ=pd.DataFrame([], columns=['index','tweetID', 'sentID', 'hashtags', 'user', 'TweetSentence','phase1Candidates', '2nd Iteration Candidates'])
   398         1         1609   1609.0      0.0              self.incomplete_tweets=pd.DataFrame([], columns=['index','tweetID', 'sentID', 'hashtags', 'user', 'TweetSentence','phase1Candidates', '2nd Iteration Candidates'])
   399         1            7      7.0      0.0              self.CandidateBase_dict= {}
   400         1            2      2.0      0.0              self.good_candidates=[]
   401         1            3      3.0      0.0              self.bad_candidates=[]
   402                                           
   403                                           
   404         5        12903   2580.6      0.0          data_frame_holder=pd.DataFrame([], columns=['index','tweetID', 'sentID', 'hashtags', 'user', 'TweetSentence','phase1Candidates', '2nd Iteration Candidates'])
   405         5           23      4.6      0.0          phase1_holder_holder=[]
   406         5           16      3.2      0.0          df_holder=[]
   407         5           15      3.0      0.0          candidateBase_holder=[]
   408                                           
   409                                                   #this has to be changed to an append function since IPQ already has incomplete tweets from prev batch  
   410         5       162348  32469.6      0.0          immediate_processingQueue = pd.concat([TweetBase, self.incomplete_tweets])
   411                                           
   412                                           
   413         5          118     23.6      0.0          print('In Phase 2',len(immediate_processingQueue))
   414                                                   #immediate_processingQueue=immediate_processingQueue.reset_index(drop=True)
   415         5          239     47.8      0.0          combined_list_here=([]+list(cachedStopWords)+chat_word_list+day_list+month_list+article_list+prep_list)
   416         5         2728    545.6      0.0          combined_list_filtered=list(filter(lambda word: word not in (prep_list+article_list+month_list), combined_list_here))
   417                                                   #--------------------------------------PHASE II---------------------------------------------------
   418    224069     49956240    223.0     12.4          for index, row in immediate_processingQueue.iterrows():
   419                                           
   420                                                       #phase 1 candidates for one sentence
   421    224064       714964      3.2      0.2              phase1_holder=[]
   422                                           
   423    224064      9895858     44.2      2.4              tweetText=str(row['TweetSentence'])
   424                                                       #print(tweetText)
   425    224064      5720634     25.5      1.4              sentID=str(row['sentID'])
   426    224064      5205234     23.2      1.3              tweetID=str(row['tweetID'])
   427    224064      5062371     22.6      1.3              phase1Candidates=str(row['phase1Candidates'])
   428    224064      4979571     22.2      1.2              hashtags=str(row['hashtags'])
   429    224064      4960520     22.1      1.2              user=str(row['user'])
   430    224064      5109570     22.8      1.3              batch=str(row['entry_batch'])
   431    224064      7060023     31.5      1.7              time=str(row['start_time'])
   432    224064       610008      2.7      0.2              non_discriminative_flag=False
   433                                           
   434                                           
   435    224064       595630      2.7      0.1              if(phase1Candidates!="nan"):
   436    201540       806604      4.0      0.2                  phase1Raw=phase1Candidates.split("||")
   437    201540      1060900      5.3      0.3                  phase1Raw = list(filter(None, phase1Raw))
   438                                           
   439                                           
   440    422860      1186669      2.8      0.3                  for entities_with_loc in phase1Raw:
   441    221320       707629      3.2      0.2                      entity_to_store=entities_with_loc.split("::")[0]
   442                                                               #print(entity_to_store)
   443    221320       647595      2.9      0.2                      position=entities_with_loc.split("::")[1]
   444                                                               #print(position)
   445    221320       643241      2.9      0.2                      phase1_holder.append((entity_to_store,position))
   446                                           
   447    201540      7628474     37.9      1.9                  phase1_holder_holder.append(copy.deepcopy(phase1_holder))
   448    201540       636818      3.2      0.2                  phase1_holder.clear()
   449                                           
   450                                                       else:
   451     22524        58312      2.6      0.0                  non_discriminative_flag=True
   452     22524        70494      3.1      0.0                  phase1_holder_holder.append([])
   453                                           
   454                                           
   455                                                       #print(sen_index1)[ ()/,;:!?…-]
   456                                                       #splitList=tweetText.split()
   457    224064      4031802     18.0      1.0              splitList=re.split('[ ()/,;:!?…-]',tweetText)
   458                                                       #print(tweetText,splitList)
   459                                                       #wordlstU=list(filter(lambda word: ((word!="")&(word.strip(string.punctuation).strip().lower() not in cachedStopWords)), splitList))
   460    224064      1995206      8.9      0.5              splitList=list(map(lambda word: word.strip(), splitList))
   461    224064      1698246      7.6      0.4              tweetWordList=list(filter(lambda word: word!="", splitList))
   462                                                       #print(tweetWordList)
   463    224064      1567645      7.0      0.4              tweetWordList= [(token,idx) for idx,token in enumerate(tweetWordList)]
   464                                                       
   465                                           
   466                                           
   467                                                       #combined_list_here=([]+list(cachedStopWords)+prep_list+chat_word_list+article_list+day_list+month_list)
   468                                                       
   469    224064     15359665     68.6      3.8              tweetWordList_stopWords=list(filter (lambda word: ((((word[0].strip()).strip(string.punctuation)).lower() in combined_list_filtered)|(word[0].strip() in string.punctuation)|(word[0].startswith('@'))), tweetWordList))
   470                                           
   471                                           
   472                                                       # phase 2 candidate tuples without stopwords for a sentence
   473    224064      2524726     11.3      0.6              c=[(y[0],str(y[1]),tweetID,sentID,'ne',batch,time) for y  in tweetWordList if y not in tweetWordList_stopWords ]
   474                                                       #c=[(y[0],str(y[1])) for y  in tweetWordList if y not in tweetWordList_stopWords ]
   475                                           
   476                                                       #print(c)
   477    224064       738188      3.3      0.2              sequences=[]
   478    792158      3165519      4.0      0.8              for k, g in groupby(enumerate(c), lambda element: element[0]-int(element[1][1])):
   479    568094      3383239      6.0      0.8                  sequences.append(list(map(itemgetter(1), g)))
   480                                           
   481    224064       690321      3.1      0.2              ne_candidate_list=[]
   482    792158      2206360      2.8      0.5              for sequence in sequences:
   483                                                           '''print(sequence)
   484                                                           seq_candidates=self.check_sequence(sequence, len(sequence), CTrie)'''
   485                                           
   486    568094    163570507    287.9     40.5                  seq_candidate_list=self.get_Candidates(sequence, CTrie)
   487    568094      1508569      2.7      0.4                  if(seq_candidate_list):
   488                                                               '''seq_candidate_list= list(map(lambda e: self.join_token_tuples(e) ,seq_candidates))
   489                                                               print("====",seq_candidate_list)'''
   490                                           
   491                                                               
   492   1057878      2928494      2.8      0.7                      for candidate_tuple in seq_candidate_list:
   493                                                                   #inserts into CandidateBase and updates the correct frequency feature based on Capitalization pattern
   494    620203     36816656     59.4      9.1                          self.update_Candidatedict(candidate_tuple,non_discriminative_flag)
   495    437675      1323342      3.0      0.3                      ne_candidate_list.extend(seq_candidate_list)
   496                                                       
   497                                                       
   498                                                       #phase2_candidates='||'.join(e[0] for e in ne_candidate_list)
   499                                           
   500    224064     11546340     51.5      2.9              phase2_candidates=[self.normalize(e[0]) for e in ne_candidate_list]
   501                                           
   502                                                       #print(phase1Candidates,"====",phase2_candidates)
   503    224064      1010649      4.5      0.3              dict1 = {'tweetID':tweetID, 'sentID':sentID, 'hashtags':hashtags, 'user':user, 'TweetSentence':tweetText, 'phase1Candidates':phase1Candidates,'2nd Iteration Candidates':phase2_candidates}
   504                                           
   505    224064       652759      2.9      0.2              df_holder.append(dict1)
   506                                                       #-------------------------------------------------------------------END of 1st iteration: RESCAN+CANDIDATE_UPDATION-----------------------------------------------------------
   507                                           
   508                                                   #df_holder is the immediate processing queue of the current batch converted into a dataframe---> data_frame_holder
   509                                                   #self.append_rows(df_holder)
   510         5       536781 107356.2      0.1          data_frame_holder = pd.DataFrame(df_holder)
   511                                           
   512                                                   #convert the CandidateFeatureBase from a dictionary to dataframe---> CandidateFeatureBaseDF
   513         5           38      7.6      0.0          candidateBaseHeaders=['candidate', 'batch', 'length','cap','substring-cap','s-o-sCap','all-cap','non-cap','non-discriminative','cumulative']
   514         5        44658   8931.6      0.0          candidate_featureBase_DF=pd.DataFrame.from_dict(self.CandidateBase_dict, orient='index')
   515         5         1173    234.6      0.0          candidate_featureBase_DF.columns=candidateBaseHeaders[1:]
   516         5           26      5.2      0.0          candidate_featureBase_DF.index.name=candidateBaseHeaders[0]
   517         5         6667   1333.4      0.0          candidate_featureBase_DF = candidate_featureBase_DF.reset_index(drop=False)
   518                                                   #print(candidate_featureBase_DF.head(5))
   519                                           
   520                                                   #filtering test set based on z_score
   521                                           
   522         5          931    186.2      0.0          mert1=candidate_featureBase_DF['cumulative'].as_matrix()
   523                                                   #frequency_array = np.array(list(map(lambda val: val[0], sortedCandidateDB.values())))
   524         5          948    189.6      0.0          zscore_array1=stats.zscore(mert1)
   525                                           
   526                                           
   527                                           
   528         5         2764    552.8      0.0          candidate_featureBase_DF['Z_ScoreUnweighted']=zscore_array1
   529                                           
   530                                           
   531         5        12542   2508.4      0.0          candidate_featureBase_DF = candidate_featureBase_DF[candidate_featureBase_DF['Z_ScoreUnweighted'] > z_score_threshold]
   532                                           
   533                                           
   534                                           
   535         5       105017  21003.4      0.0          candidate_featureBase_DF['class']=''
   536                                           
   537                                                   '''
   538                                                   contains code for candidate classification
   539                                                   initialize immediate_processingQueue for phase2 of next batch
   540                                                   VERIFICATION MODULE: START OF 2nd ITERATION
   541                                                   -----puts tweet into output queue or IPQ
   542                                                   '''
   543                                           
   544                                           
   545         5        69674  13934.8      0.0          my_classifier= svm.SVM1('training.csv')
   546         5       105421  21084.2      0.0          candidate_featureBase_DF=my_classifier.run(candidate_featureBase_DF,z_score_threshold)
   547                                           
   548                                           
   549         5      2085202 417040.4      0.5          candidate_featureBase_DF=self.set_readable_labels(candidate_featureBase_DF)
   550                                                   
   551                                           
   552         5       253226  50645.2      0.1          candidate_featureBase_DF.to_csv("candidate_featureBase_DF.csv", sep=',', encoding='utf-8')
   553                                           
   554                                           
   555         5     29145918 5829183.6      7.2          self.incomplete_tweets=self.get_incomplete_tweets_frame(data_frame_holder,candidate_featureBase_DF)
   556                                           
   557         5       631912 126382.4      0.2          self.incomplete_tweets.to_csv("incomplete_tweets.csv", sep=',', encoding='utf-8')
   558                                           
   559                                           
   560                                           
   561         5       728019 145603.8      0.2          self.incomplete_tweets.drop('2nd Iteration Candidates', axis=1, inplace=True)
   562                                           
   563                                           
   564                                           
   565                                                   #final operations
   566         5           44      8.8      0.0          self.counter=self.counter+1
   567         5        93155  18631.0      0.0          del(df_holder)
   568         5        16225   3245.0      0.0          del(immediate_processingQueue)
   569                                                   #print(len(self.CandidateBase_dict))
   570                                                   #return self.data_frame_holder_OQ
   571         5           42      8.4      0.0          return

